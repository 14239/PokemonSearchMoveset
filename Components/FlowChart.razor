@using System;
@using System.Text;
@inject IJSRuntime JSRuntime



<div class="flow-chart-wrapper">
	<div class="flow-chart">
		@RenderAllNodes()
		@RenderAllArrows()
	</div>
</div>

@code {


	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await JSRuntime.InvokeVoidAsync("initFlowChart");
		}
	}

	private MarkupString RenderNode(FlowNode node)
	{
		if (node == null) return new MarkupString("");

		StringBuilder contentBuilder = new StringBuilder();
		string highlightedClass = "";

		if (node.Type == NodeType.Decision)
		{
			highlightedClass = node.IsHighlighted ? "highlighted-decision" : "";

		}
		else
		{
			highlightedClass = node.IsHighlighted ? "highlighted" : "";

		}

		string nodeContent = node.Type switch
		{
			NodeType.Start => $"<div class='node start {highlightedClass}' style='left: {node.GetAbsoluteX()}px; top: {node.GetAbsoluteY()}px;'>{node.Content}</div>",
			NodeType.Decision => $"<div class='node decision-container' style='left: {node.GetAbsoluteX()}px; top: {node.GetAbsoluteY()}px;'><div class='decision {highlightedClass}'></div><div class='decision-content'>{node.Content}</div></div>",
			NodeType.Action => $"<div class='node action {highlightedClass}' style='left: {node.GetAbsoluteX()}px; top: {node.GetAbsoluteY()}px;'>{node.Content}</div>",
			_ => ""
		};

		contentBuilder.Append(nodeContent);
		return new MarkupString(contentBuilder.ToString());
	}


	List<FlowNode> allNodes = new List<FlowNode>();

	private MarkupString RenderAllNodes()
	{
		StringBuilder allNodeContent = new StringBuilder();

		foreach (var node in allNodes)
		{
			allNodeContent.Append(RenderNode(node).ToString());
		}

		return new MarkupString(allNodeContent.ToString());
	}

	protected override void OnInitialized()
	{
		CreateFlowChartExample();
	}


	public void CreateFlowChartExample()
	{
		FlowNode startNode = new FlowNode
			{
				Type = NodeType.Start,
				Content = "시작",
				X = 800,
				Y = 100
			};
		allNodes.Add(startNode);

		// 결정 노드 생성
		FlowNode decisionNode1 = new FlowNode
			{
				Type = NodeType.Decision,
				Content = "is it Pikachu?",
				X = 0,
				Y = 100,
				Parent = startNode,
				IsHighlighted = true
			};
		allNodes.Add(decisionNode1);

		var yesAction1 = new FlowNode
			{
				Type = NodeType.Action,
				Content = "Yes Action 1",
				X = -150,
				Y = 100,
				Parent = decisionNode1,
				IsHighlighted = true
			};
		allNodes.Add(yesAction1);

		var noAction1 = new FlowNode
			{
				Type = NodeType.Action,
				Content = "No Action 1",
				X = 150,
				Y = 100,
				Parent = decisionNode1
			};
		allNodes.Add(noAction1);

	}

	private MarkupString RenderAllArrows()
	{
		StringBuilder allArrowsContent = new StringBuilder();

		foreach (var node in allNodes)
		{
			if (node.Parent != null)
				allArrowsContent.Append(RenderArrow(node.Parent, node).ToString());
		}

		return new MarkupString(allArrowsContent.ToString());
	}

	private string RenderArrow(FlowNode fromNode, FlowNode toNode)
	{
		if (fromNode == null || toNode == null) return "";

		StringBuilder arrowBuilder = new StringBuilder();

		int startX = fromNode.GetAbsoluteX() + 11;
		int startY = fromNode.GetAbsoluteY() + 11;
		int endX = toNode.GetAbsoluteX() + 11;
		int endY = toNode.GetAbsoluteY() + 11;

		int horizontalLength = endX - startX;
		int verticalLength = endY - startY;

		string highlightedClass = toNode.IsHighlighted ? "highlighted" : "";


		// X 값이 같으면 세로로 직선
		if (startX == endX)
		{
			arrowBuilder.Append($"<div class='line {highlightedClass}' style='left:{startX}px; top:{Math.Min(startY, endY)}px; height:{Math.Abs(verticalLength)}px;'></div>");
			return arrowBuilder.ToString();
		}
		else
		{

			// 가로 선
			if (horizontalLength > 0)
			{
				arrowBuilder.Append($"<div class='line {highlightedClass}' style='left:{startX}px; top:{startY}px; height:{horizontalLength}px; transform: rotate(-90deg); transform-origin: left top;'></div>");
			}
			else
			{
				arrowBuilder.Append($"<div class='line {highlightedClass}' style='left:{startX}px; top:{startY}px; height:{Math.Abs(horizontalLength)}px; transform: rotate(90deg); transform-origin: right top;'></div>");
			}

			// 세로 선
			if (verticalLength != 0)
			{
				arrowBuilder.Append($"<div class='line {highlightedClass}' style='left:{endX}px; top:{Math.Min(startY, endY)}px; height:{Math.Abs(verticalLength)}px;'></div>");
			}

		}

		return arrowBuilder.ToString();
	}





}


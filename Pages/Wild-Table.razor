@page "/wild-table"

@using Microsoft.AspNetCore.Components.Forms
@using PokemonSearchMoveset.Models
@using PokemonSearchMoveset.Services
@using Microsoft.JSInterop
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using PokemonSearchMoveset.Components
@inject DataService DataService
@using System.Globalization
@using System.IO


<div class="col-md-12 mb-3">
    <!-- mb-3 추가 -->
    <VersionSelect CurrentLanguageId="@CurrentLanguageId" OnVersionSelected="HandleVersionChecked" @ref="versionSelectComponent" />
</div>
<InputFile OnChange="LoadCsvData" />

<label>
    <input type="checkbox" @bind="DisplayAsInt"> Display values as int
</label>


<button @onclick="GenerateOutput">Generate Output Table</button>

@if (OutputTable != null)
{
    <table>
        <thead>
            <tr>
                <th @onclick="() => SortTable(nameof(OutputRow.Id))">ID</th>
                <th @onclick="() => SortTable(nameof(OutputRow.Name))">Pokemon Name</th>
                <th @onclick="() => SortTable(nameof(OutputRow.Level))">Level</th>
                <th>Type1</th>
                <th>Type2</th>
                <th>Ability1</th>
                <th>Ability2</th>
                <th>Hidden Ability</th>
                <th>Move1</th>
                <th>Move2</th>
                <th>Move3</th>
                <th>Move4</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var row in OutputTable)
            {

                <tr>
                    <td>@row.Id</td>
                    <td>@row.Name</td>
                    <td>@row.Level</td>
                    <td>@row.Type1</td>
                    <td>@row.Type2</td>
                    <td>@row.Ability1</td>
                    <td>@row.Ability2</td>
                    <td>@row.Ability3</td>
                    <td>@row.Move1</td>
                    <td>@row.Move2</td>
                    <td>@row.Move3</td>
                    <td>@row.Move4</td>
                </tr>
            }
        </tbody>
    </table>

}
@code {
    [Inject]
    private DataService dataService { get; set; }


    private List<PokemonCSV> Pokemons { get; set; } = new List<PokemonCSV>();
    private List<PokemonAbilityCSV> AllPokemonAbilities { get; set; } = new List<PokemonAbilityCSV>();
    private List<AbilityNameCSV> AbilityNames { get; set; } = new List<AbilityNameCSV>();
    private List<PokemonMoveCSV> AllPokemonMoves { get; set; } = new List<PokemonMoveCSV>();
    private List<PokemonTypeCSV> PokemonTypes = new List<PokemonTypeCSV>();
    private List<PokemonTypePastCSV> PokemonTypesPast = new List<PokemonTypePastCSV>();

    private List<TypeNameCSV> TypeNames = new List<TypeNameCSV>();
    public List<MoveNameCSV> MoveNames { get; set; } = new List<MoveNameCSV>();

    // 필터링된 데이터를 저장할 변수를 추가합니다.
    private List<PokemonMoveCSV> FilteredPokemonMoves { get; set; } = new List<PokemonMoveCSV>();



    protected override void OnInitialized()
    {
        Pokemons = dataService.Pokemons;
        AllPokemonAbilities = dataService.AllPokemonAbilities;
        AllPokemonMoves = dataService.AllPokemonMoves;
        PokemonTypes = dataService.PokemonTypes;
        TypeNames = dataService.TypeNames;
        PokemonTypesPast = dataService.PokemonTypesPast;
        MoveNames = dataService.MoveNames;
        AbilityNames = dataService.AbilityNames;

        FilteredPokemonMoves = AllPokemonMoves
            .Where(pm =>
                (pm.VersionGroupId == 25 || pm.VersionGroupId == 26) &&
                pm.PokemonMoveMethodId == 1)
            .ToList();
    }


    private MoveSearch moveSearchComponent = new MoveSearch();
    private AbilitySearch abilitySearchComponent = new AbilitySearch();
    private VersionSelect versionSelectComponent = new VersionSelect();

    // 데이터 가져오기

    private int SelectedVersionId { get; set; }

    private void HandleVersionChecked(int checkedVersionId)
    {
        SelectedVersionId = checkedVersionId;
        Console.WriteLine($"Version selected: {SelectedVersionId}"); // 디버그 메시지 추가
    }




    // 언어 변경
    private int _previousLanguageId;

    [CascadingParameter(Name = "SelectedLanguageId")]
    public int CurrentLanguageId { get; set; }
    public int CurrentGenerationId { get; set; }

    protected override void OnParametersSet()
    {
        if (_previousLanguageId != CurrentLanguageId)
        {
            StateHasChanged();
            _previousLanguageId = CurrentLanguageId;
        }
    }

    private List<WildPokemon> wildPokemons { get; set; } = new List<WildPokemon>();
    private List<OutputRow> OutputTable { get; set; }


    private class PokemonName
    {
        public string Name { get; set; }
        public string LevelRange { get; set; }
    }

    private class OutputRow
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public int Level { get; set; }
        public string Type1 { get; set; }
        public string Type2 { get; set; }
        public string Ability1 { get; set; }
        public string Ability2 { get; set; }
        public string Ability3 { get; set; }
        public string Move1 { get; set; }
        public string Move2 { get; set; }
        public string Move3 { get; set; }
        public string Move4 { get; set; }
    }


    public class WildPokemon
    {
        public string Location { get; set; }
        public string SubLocation { get; set; }
        public string Name { get; set; }
        public string Version1 { get; set; }
        public string Version2 { get; set; }
        public string LevelRange { get; set; }
    }

    private async Task LoadCsvData(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file != null)
        {
            var stream = file.OpenReadStream();
            using var reader = new StreamReader(stream);
            var csvData = await reader.ReadToEndAsync();

            wildPokemons = ParseInputData(csvData);
        }
    }





    private List<WildPokemon> ParseInputData(string csvData)
    {
        var lines = csvData.Split('\n').Skip(1); // 첫 번째 행은 헤더이므로 생략
        var result = new List<WildPokemon>();

        string previousLine = null;

        foreach (var line in lines)
        {
            var currentLine = line;
            if (previousLine != null)
            {
                currentLine = previousLine + currentLine;
                previousLine = null;
            }

            var tokens = currentLine.Split(',');
            if (tokens.Length >= 7) // 최소한의 필요한 열이 있는지 확인
            {
                result.Add(new WildPokemon
                    {
                        Location = tokens[0].Replace("\"", "").Trim(),
                        SubLocation = tokens[1].Trim(),
                        Name = tokens[2].Trim(),
                        Version1 = tokens[3].Trim(),
                        Version2 = tokens[4].Trim(),
                        LevelRange = tokens[5].Trim()
                    });
            }
            else
            {
                previousLine = currentLine;
            }
        }

        return result;
    }

    private void GenerateOutput()
    {
        OutputTable = new List<OutputRow>();

        foreach (var wildPokemon in wildPokemons)
        {
            // 이름에서 띄어쓰기를 하이픈으로 교체
            var formattedName = wildPokemon.Name.Replace(" ", "-").Replace("é", "e").ToLower();

            // 첫 줄의 이름을 추출
            var primaryName = formattedName.Replace("\"", "").Split(new[] { "\r\n", "\r", "\n" }, StringSplitOptions.None)[0];

            // 동일한 이름을 찾는다
            var exactMatch = Pokemons.FirstOrDefault(p => string.Equals(p.identifier, primaryName, StringComparison.OrdinalIgnoreCase));

            var bestMatch = new PokemonCSV();

            // 한 줄이고 동일한 이름이 있다면 사용
            if (!wildPokemon.Name.Contains("\"") && exactMatch != null)
            {
                AddOutputRow(exactMatch, wildPokemon);
            }
            else
            {
                var validPokemonIds = FilteredPokemonMoves.Select(pm => pm.PokemonId).Distinct().ToList();

                var candidates = Pokemons
                    .Where(p => p.identifier.Contains(primaryName, StringComparison.OrdinalIgnoreCase) && validPokemonIds.Contains(p.Id))
                    .ToList();

                if (wildPokemon.Name.Contains("\""))
                {
                    bestMatch = candidates.OrderByDescending(p => GetMatchingCharacterCount(p.identifier, formattedName)).FirstOrDefault();
                }
                else
                {
                    bestMatch = candidates.FirstOrDefault();
                }

                if (bestMatch != null)
                {
                    AddOutputRow(bestMatch, wildPokemon);
                }
                else
                {
                    Console.WriteLine($"No match found for {wildPokemon.Name}.");
                }
            }
        }
    }

    private bool DisplayAsInt { get; set; }


    private void AddOutputRow(PokemonCSV matchedPokemon, WildPokemon wildPokemon)
    {
        var levels = GetLevelsFromRange(wildPokemon.LevelRange);

        foreach (var level in levels)
        {
            // 이미 OutputTable에 해당 포켓몬과 레벨이 있다면 생략
            if (OutputTable.Any(row => row.Id == matchedPokemon.Id && row.Level == level))
                continue;

            var outputRow = new OutputRow { Id = matchedPokemon.Id, Name = wildPokemon.Name, Level = level };

            var possibleMoves = FilteredPokemonMoves
                .Where(pm => pm.PokemonId == matchedPokemon.Id && pm.Level <= level)
                .OrderByDescending(pm => pm.Level)
                .ThenByDescending(pm => pm.Order)
                .Take(4)
                .Reverse()
                .ToList();

            var abilities = GetAbilityNamesByPokemonId(matchedPokemon.Id);
            outputRow.Ability1 = abilities.Item1;
            outputRow.Ability2 = abilities.Item2;
            outputRow.Ability3 = abilities.Item3;

            var types = GetPokemonTypesById(matchedPokemon.Id);
            outputRow.Type1 = types.Type1;
            outputRow.Type2 = types.Type2;
            if(DisplayAsInt)
            {
                if (possibleMoves.Count > 0)
                    outputRow.Move1 = possibleMoves[0].MoveId.ToString();
                if (possibleMoves.Count > 1)
                    outputRow.Move2 = possibleMoves[1].MoveId.ToString();
                if (possibleMoves.Count > 2)
                    outputRow.Move3 = possibleMoves[2].MoveId.ToString();
                if (possibleMoves.Count > 3)
                    outputRow.Move4 = possibleMoves[3].MoveId.ToString();

            }
            else
            {
                if (possibleMoves.Count > 0)
                    outputRow.Move1 = GetMoveNameById(possibleMoves[0].MoveId);
                if (possibleMoves.Count > 1)
                    outputRow.Move2 = GetMoveNameById(possibleMoves[1].MoveId);
                if (possibleMoves.Count > 2)
                    outputRow.Move3 = GetMoveNameById(possibleMoves[2].MoveId);
                if (possibleMoves.Count > 3)
                    outputRow.Move4 = GetMoveNameById(possibleMoves[3].MoveId);

            }


            OutputTable.Add(outputRow);
        }
    }



    private int GetMatchingCharacterCount(string source, string target)
    {
        int count = 0;
        foreach (var character in source)
        {
            if (target.Contains(character))
            {
                count++;
                target = target.Remove(target.IndexOf(character), 1); // 일치하는 첫 번째 문자를 제거
            }
        }
        return count;
    }





    private IEnumerable<int> GetLevelsFromRange(string range)
    {
        if (range.Contains("×"))
            return Enumerable.Empty<int>();

        if (range.Contains("-"))
        {
            var parts = range.Split('-');
            if (parts.Length != 2)
                return Enumerable.Empty<int>();

            var start = int.Parse(parts[0].Replace("\"", ""));
            var end = int.Parse(parts[1].Replace("\"", ""));


            // 'end' 값이 'start' 값보다 작거나 같은 경우 처리
            if (end <= start)
                return Enumerable.Empty<int>();

            return Enumerable.Range(start, end - start + 1);
        }
        else
        {
            // 단일 레벨 처리
            int singleLevel;
            if (int.TryParse(range, out singleLevel))
            {
                return new List<int> { singleLevel };
            }
            else
            {
                return Enumerable.Empty<int>();
            }
        }
    }


    public string GetMoveNameById(int moveId)
    {
        var matchingMoveName = MoveNames.FirstOrDefault(mn => mn.MoveId == moveId && mn.LocalLanguageId == CurrentLanguageId);
        return matchingMoveName?.Name ?? $"Move {moveId}";
    }

    public string GetAbilityNameById(int abilityId)
    {
        if (abilityId != -1)
        {
            var matchingAbilityName = AbilityNames.FirstOrDefault(mn => mn.AbilityId == abilityId && mn.LocalLanguageId == CurrentLanguageId);
            return matchingAbilityName?.Name ?? $"Ability {abilityId}";

        }
        else
        {
            return "";
        }



    }

    public (string Ability1, string Ability2, string HiddenAbility) GetAbilityNamesByPokemonId(int pokemonId)
    {
        var abilities = AllPokemonAbilities.Where(pa => pa.PokemonId == pokemonId).ToList();
        string ability1 = "";
        string ability2 = "";
        string hiddenAbility = "";


        if (DisplayAsInt)
        {
            ability1 = (abilities.FirstOrDefault(a => a.Slot == 1)?.AbilityId ?? -1).ToString();
            ability2 = (abilities.FirstOrDefault(a => a.Slot == 2)?.AbilityId ?? -1).ToString();
            hiddenAbility = (abilities.FirstOrDefault(a => a.Slot == 3)?.AbilityId ?? -1).ToString();

        }
        else
        {
            ability1 = GetAbilityNameById(abilities.FirstOrDefault(a => a.Slot == 1)?.AbilityId ?? -1);
            ability2 = GetAbilityNameById(abilities.FirstOrDefault(a => a.Slot == 2)?.AbilityId ?? -1);
            hiddenAbility = GetAbilityNameById(abilities.FirstOrDefault(a => a.Slot == 3)?.AbilityId ?? -1);

        }
        return (ability1, ability2, hiddenAbility);
    }
    public string GetTypeNameById(int typeId, int languageId)
    {
        return TypeNames.FirstOrDefault(tn => tn.TypeId == typeId && tn.LocalLanguageId == languageId)?.Name ?? string.Empty;
    }

    public (string Type1, string Type2) GetPokemonTypesById(int pokemonId)
    {
        var types = PokemonTypes.Where(pt => pt.PokemonId == pokemonId).ToList();
        var typePast = PokemonTypesPast.FirstOrDefault(ptp => ptp.PokemonId == pokemonId && ptp.GenerationId >= versionSelectComponent.CurrentGenerationId);

        if (typePast != null)
        {
            // 만약 조건에 맞는 PokemonTypePast가 있으면 해당 타입을 사용합니다.
            string type1 = typePast.Slot == 1 ? GetTypeNameById(typePast.TypeId, CurrentLanguageId) : string.Empty;
            string type2 = typePast.Slot == 2 ? GetTypeNameById(typePast.TypeId, CurrentLanguageId) : string.Empty;
            return (type1, type2);
        }
        else
        {
            // 그렇지 않으면 기본 PokemonTypes를 사용합니다.
            string type1 = types.FirstOrDefault(t => t.Slot == 1) != null ? GetTypeNameById(types.First(t => t.Slot == 1).TypeId, CurrentLanguageId) : string.Empty;
            string type2 = types.FirstOrDefault(t => t.Slot == 2) != null ? GetTypeNameById(types.First(t => t.Slot == 2).TypeId, CurrentLanguageId) : string.Empty;
            return (type1, type2);
        }
    }













    private bool sortAscending = true;
    private string currentSortingColumn = "";

    private void SortTable(string columnName)
    {
        if (columnName == currentSortingColumn)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            currentSortingColumn = columnName;
            sortAscending = true;
        }

        if (columnName == nameof(OutputRow.Id))
        {
            OutputTable = sortAscending ? OutputTable.OrderBy(r => r.Id).ToList() : OutputTable.OrderByDescending(r => r.Id).ToList();
        }
        else if (columnName == nameof(OutputRow.Name))
        {
            OutputTable = sortAscending ? OutputTable.OrderBy(r => r.Name).ToList() : OutputTable.OrderByDescending(r => r.Name).ToList();
        }
        else if (columnName == nameof(OutputRow.Level))
        {
            OutputTable = sortAscending ? OutputTable.OrderBy(r => r.Level).ToList() : OutputTable.OrderByDescending(r => r.Level).ToList();
        }
    }


}

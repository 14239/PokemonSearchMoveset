@using PokemonSearchMoveset.Models
@using PokemonSearchMoveset.Services
@using PokemonSearchMoveset.Components
@using Microsoft.JSInterop
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject DataService DataService


@page "/search-a-pokemon"

@code {

	[Inject]
	private DataService dataService { get; set; }
	// CSV 로드

	private List<PokemonAbilityCSV> AllPokemonAbilities { get; set; } = new List<PokemonAbilityCSV>();
	private List<PokemonMoveCSV> AllPokemonMoves { get; set; } = new List<PokemonMoveCSV>();
	private List<PokemonCSV> Pokemons { get; set; } = new List<PokemonCSV>();
	private List<PokemonSpeciesNameCSV> PokemonNames { get; set; } = new List<PokemonSpeciesNameCSV>();
	private List<PokemonFormCSV> PokemonForms { get; set; } = new List<PokemonFormCSV>();
	private List<PokemonFormNameCSV> PokemonFormNames = new List<PokemonFormNameCSV>();
	private List<PokemonTypeCSV> PokemonTypes = new List<PokemonTypeCSV>();
	private List<PokemonTypePastCSV> PokemonTypesPast = new List<PokemonTypePastCSV>();
	private List<TypeNameCSV> TypeNames = new List<TypeNameCSV>();
	public List<MoveNameCSV> MoveNames { get; set; } = new List<MoveNameCSV>();



	protected override void OnInitialized()
	{


		//Task.Run(async () => await LoadData());
		AllPokemonAbilities = dataService.AllPokemonAbilities;
		AllPokemonMoves = dataService.AllPokemonMoves;
		Pokemons = dataService.Pokemons;
		PokemonNames = dataService.PokemonNames;
		PokemonForms = dataService.PokemonForms;
		PokemonFormNames = dataService.PokemonFormNames;
		TypeNames = dataService.TypeNames;
		PokemonTypes = dataService.PokemonTypes;
		PokemonTypesPast = dataService.PokemonTypesPast;
		MoveNames = dataService.MoveNames;
	}


	// 언어 변경
	private int _previousLanguageId;

	[CascadingParameter(Name = "SelectedLanguageId")]
	public int CurrentLanguageId { get; set; }
	public int CurrentGenerationId { get; set; }

	protected override void OnParametersSet()
	{
		if (_previousLanguageId != CurrentLanguageId)
		{
			StateHasChanged();
			_previousLanguageId = CurrentLanguageId;
		}
	}


	private VersionSelect versionSelectComponent = new VersionSelect();
	private MoveSearch moveSearchComponent = new MoveSearch();
	private AbilitySearch abilitySearchComponent = new AbilitySearch();

	// 데이터 가져오기

	private int SelectedVersionId { get; set; }

	private void HandleVersionChecked(int checkedVersionId)
	{
		SelectedVersionId = checkedVersionId;
		Console.WriteLine($"Version selected: {SelectedVersionId}"); // 디버그 메시지 추가
	}

	public List<int> SelectedAbilities { get; set; } = new List<int>();

	private void HandleAbilitySelected(AbilityNameCSV selectedAbility)
	{
		if (!SelectedAbilities.Contains(selectedAbility.AbilityId))  // 중복 선택 체크
		{
			SelectedAbilities.Add(selectedAbility.AbilityId);
			StateHasChanged();
		}
		else
		{
			SelectedAbilities.Remove(selectedAbility.AbilityId);
			StateHasChanged();
		}
	}

	private void RemoveSelectedAbility(int abilityId)
	{
		SelectedAbilities.Remove(abilityId);
		StateHasChanged();
	}


	public List<int> SelectedMoves { get; set; } = new List<int>();

	private void HandleMoveSelected(MoveNameCSV selectedMove)
	{
		if (!SelectedMoves.Contains(selectedMove.MoveId))  // 중복 선택 체크
		{
			SelectedMoves.Add(selectedMove.MoveId);
			StateHasChanged();
		}
		else
		{
			SelectedMoves.Remove(selectedMove.MoveId);
			StateHasChanged();
		}
	}

	private void RemoveSelectedMove(int moveId)
	{
		SelectedMoves.Remove(moveId);
		StateHasChanged();
	}

	public List<int> SelectedMoveMethods { get; set; } = new List<int>() {1};


	private Dictionary<int, string> MoveMethods = new Dictionary<int, string>
	{
		{1, "Level Up"},
		{2, "Egg Move"},
		{3, "Move Tutor"},
		{4, "TM"},
		{5, "Stadium"},
		{6, "Light Ball"},
		{7, "Colosseum"},
		{8, "XD Shadow"},
		{9, "XD Purification"},
		{10, "Form Change"},
		{11, "Zygarde Cube"},
	};


	private void HandleCheckboxChange(ChangeEventArgs e, int methodKey)
	{
		bool isChecked = (bool)e.Value;

		if (isChecked)
		{
			if (!SelectedMoveMethods.Contains(methodKey))
			{
				SelectedMoveMethods.Add(methodKey);
			}
		}
		else
		{
			if (SelectedMoveMethods.Contains(methodKey))
			{
				SelectedMoveMethods.Remove(methodKey);
			}
		}
	}



	private List<PokemonMoveCSV> FilteredPokemonMoves { get; set; } = new List<PokemonMoveCSV>();
	private List<dynamic> groupedMoves = new List<dynamic>();


	private void FilterPokemonMoves()
	{
		// 1. 버전으로 필터링
		FilteredPokemonMoves = AllPokemonMoves.Where(pm =>
			pm.VersionGroupId == SelectedVersionId
		).ToList();

		// 2. 특성으로 필터링 (선택된 특성이 있는 경우만)
		if (SelectedAbilities.Count > 0)
		{
			var pokemonsWithSelectedAbilities = AllPokemonAbilities.Where(pa =>
				SelectedAbilities.Contains(pa.AbilityId)
			).Select(pa => pa.PokemonId).Distinct().ToList();

			FilteredPokemonMoves = FilteredPokemonMoves.Where(pm =>
				pokemonsWithSelectedAbilities.Contains(pm.PokemonId)
			).ToList();
		}

		// 3. 기술로 필터링
		FilteredPokemonMoves = FilteredPokemonMoves.Where(pm =>
			SelectedMoveMethods.Contains(pm.PokemonMoveMethodId) &&   // 선택된 method
			SelectedMoves.Contains(pm.MoveId)
		).ToList();

		// 필터링 결과 확인
		Console.WriteLine($"Found {FilteredPokemonMoves.Count} matching moves."); // 디버그 메시지 추가
	}



	private async Task FindWildPokemon()
	{
		// CSV 데이터가 로드되지 않았다면 로드합니다.
		//await LoadDataOnDemand();

		// 포켓몬 데이터 필터링
		FilterPokemonMoves();

		this.groupedMoves = FilteredPokemonMoves.GroupBy(move => move.PokemonId)
				.Select(group => (dynamic)new
				{
					PokemonId = group.Key,
					Moves = group.ToList(),
					UniqueMoveCount = group.Select(m => m.MoveId).Distinct().Count()

				}).ToList();


		Console.WriteLine($"Number of grouped pokemons: {groupedMoves.Count}");
		StateHasChanged();
	}


	public string GetPokemonNameById(int id)
	{
		// PokemonCSV 목록에서 주어진 id와 일치하는 species_id를 찾습니다.
		int speciesId = Pokemons.FirstOrDefault(p => p.Id == id)?.SpeciesId ?? 0;

		// 해당 species_id와 현재 언어 설정을 사용하여 PokemonNames 목록에서 기본 이름을 찾습니다.
		string baseName = PokemonNames.FirstOrDefault(pn => pn.SpeciesId == speciesId && pn.LocalLanguageId == CurrentLanguageId)?.Name ?? $"Pokemon {id}";

		// 만약 id가 10,000 이상이면 PokemonFormNames에서 폼 이름을 추가적으로 찾아 반환합니다.
		if (id >= 10000)
		{
			var formId = PokemonForms.FirstOrDefault(pf => pf.PokemonId == id)?.Id ?? 0;
			var formName = PokemonFormNames.FirstOrDefault(pfn => pfn.PokemonFormId == formId && pfn.LocalLanguageId == CurrentLanguageId)?.FormName;
			if (!string.IsNullOrEmpty(formName))
			{
				return $"{baseName} {formName}";
			}
		}

		return baseName;
	}


	public string GetMoveNameById(int moveId)
	{
		var matchingMoveName = moveSearchComponent.MoveNames.FirstOrDefault(mn => mn.MoveId == moveId && mn.LocalLanguageId == CurrentLanguageId);
		return matchingMoveName?.Name ?? $"Move {moveId}";
	}


	public int GetSpeciesIdById(int Id)
	{
		return Pokemons.FirstOrDefault(p => p.Id == Id)?.SpeciesId ?? 0;
	}

	public string GetTypeNameById(int typeId, int languageId)
	{
		return TypeNames.FirstOrDefault(tn => tn.TypeId == typeId && tn.LocalLanguageId == languageId)?.Name ?? string.Empty;
	}

	public (string Type1, string Type2) GetPokemonTypesById(int pokemonId)
	{
		var types = PokemonTypes.Where(pt => pt.PokemonId == pokemonId).ToList();
		var typePast = PokemonTypesPast.FirstOrDefault(ptp => ptp.PokemonId == pokemonId && ptp.GenerationId >= versionSelectComponent.CurrentGenerationId);

		if (typePast != null)
		{
			// 만약 조건에 맞는 PokemonTypePast가 있으면 해당 타입을 사용합니다.
			string type1 = typePast.Slot == 1 ? GetTypeNameById(typePast.TypeId, CurrentLanguageId) : string.Empty;
			string type2 = typePast.Slot == 2 ? GetTypeNameById(typePast.TypeId, CurrentLanguageId) : string.Empty;
			return (type1, type2);
		}
		else
		{
			// 그렇지 않으면 기본 PokemonTypes를 사용합니다.
			string type1 = types.FirstOrDefault(t => t.Slot == 1) != null ? GetTypeNameById(types.First(t => t.Slot == 1).TypeId, CurrentLanguageId) : string.Empty;
			string type2 = types.FirstOrDefault(t => t.Slot == 2) != null ? GetTypeNameById(types.First(t => t.Slot == 2).TypeId, CurrentLanguageId) : string.Empty;
			return (type1, type2);
		}
	}


	public string GetAbilityNameById(int abilityId)
	{
		if(abilityId != -1)
		{
			var matchingAbilityName = abilitySearchComponent.AbilityNames.FirstOrDefault(mn => mn.AbilityId == abilityId && mn.LocalLanguageId == CurrentLanguageId);
			return matchingAbilityName?.Name ?? $"Ability {abilityId}";

		}
		else
		{
			return "";
		}



	}

	public (string Ability1, string Ability2, string HiddenAbility) GetAbilityNamesByPokemonId(int pokemonId)
	{
		var abilities = AllPokemonAbilities.Where(pa => pa.PokemonId == pokemonId).ToList();

		string ability1 = GetAbilityNameById(abilities.FirstOrDefault(a => a.Slot == 1)?.AbilityId ?? -1);
		string ability2 = GetAbilityNameById(abilities.FirstOrDefault(a => a.Slot == 2)?.AbilityId ?? -1);
		string hiddenAbility = GetAbilityNameById(abilities.FirstOrDefault(a => a.Slot == 3)?.AbilityId ?? -1);

		return (ability1, ability2, hiddenAbility);
	}

	// 표 정렬
	private enum SortColumn
	{
		SpeciesId,
		Name,
		NumberOfMoves,
		MoveName,
		Level
	}

	private SortColumn CurrentSortColumn { get; set; } = SortColumn.SpeciesId;
	private bool IsAscendingSort { get; set; } = true;

	private void SortData(SortColumn column)
	{
		if (CurrentSortColumn == column)
		{
			IsAscendingSort = !IsAscendingSort;
		}
		else
		{
			CurrentSortColumn = column;
			IsAscendingSort = true;
		}

		switch (column)
		{
			case SortColumn.Name:
				groupedMoves = IsAscendingSort ?
					groupedMoves.OrderBy(group => GetPokemonNameById(group.PokemonId)).ToList() :
					groupedMoves.OrderByDescending(group => GetPokemonNameById(group.PokemonId)).ToList();
				break;
			case SortColumn.SpeciesId:
				groupedMoves = IsAscendingSort ?
					groupedMoves.OrderBy(group => GetSpeciesIdById(group.PokemonId)).ToList() :
					groupedMoves.OrderByDescending(group => GetSpeciesIdById(group.PokemonId)).ToList();
				break;
			case SortColumn.NumberOfMoves:
				groupedMoves = IsAscendingSort ?
					groupedMoves.OrderBy(group => group.Moves.Count).ToList() :
					groupedMoves.OrderByDescending(group => group.UniqueMoveCount).ToList();
				break;
		}

		StateHasChanged();
	}


	// 클릭 시 정보 표시 용도
	private PokemonInfoLayer PokemonInfoLayerRef;

	private void OnPokemonNameClicked(int pokemonId)
	{
		var types = GetPokemonTypesById(pokemonId);
		var abilities = GetAbilityNamesByPokemonId(pokemonId);

		PokemonInfoLayerRef.Show(pokemonId, GetPokemonNameById(pokemonId), types.Item1, types.Item2, abilities.Item1, abilities.Item2, abilities.Item3);
	}

	// 테스트용
	private string inputText;
	private List<string> results;

	private void LookupMoves()
	{
		var moveNames = inputText.Split(new[] { "\r\n", "\r", "\n" }, StringSplitOptions.None);
		results = new List<string>();
		foreach (var moveName in moveNames)
		{
			var moveId = GetMoveIdByName(moveName);
			results.Add(moveId?.ToString() ?? moveName);
		}
	}

	public int? GetMoveIdByName(string moveName)
	{
		var matchingMove = moveSearchComponent.MoveNames.FirstOrDefault(mn => mn.Name.Equals(moveName, StringComparison.OrdinalIgnoreCase) && mn.LocalLanguageId == CurrentLanguageId);
		return matchingMove?.MoveId;
	}


}



<div class="row">
	<div class="col-md-12 mb-3">
		<!-- mb-3 추가 -->
		<VersionSelect CurrentLanguageId="@CurrentLanguageId" OnVersionSelected="HandleVersionChecked" @ref="versionSelectComponent" />
	</div>
	<div class="col-md-2 mb-3">
		<!-- mb-3 추가 -->
		<AbilitySearch CurrentLanguageId="@CurrentLanguageId" @ref="abilitySearchComponent" OnAbilitySelected="HandleAbilitySelected" />
	</div>
	<div class="col-md-2 mb-3">
		<!-- mb-3 추가 -->
		<h5>Selected Abilities:</h5>
		<div class="gap"></div>
		<div class="bordered-box-container">
			@foreach (var abilityId in SelectedAbilities)
			{
				<div @onclick="() => RemoveSelectedAbility(abilityId)" class="selectable-text">
					@GetAbilityNameById(abilityId) (ID: @abilityId)
				</div>
			}
		</div>
	</div>
	<div class="col-md-4 mb-3">
		<!-- mb-3 추가 -->
		<MoveSearch
			OnMoveSelected="HandleMoveSelected"
			CurrentLanguageId="@CurrentLanguageId"
			MoveNames="@MoveNames"
			@ref="moveSearchComponent"
			/>
	</div>
	<div class="col-md-4">
		<h5>Selected Moves:</h5>
		<details class="mb-3">
			<!-- mb-3 추가 -->
			<summary>Learn Method</summary>
			@foreach (var method in MoveMethods)
			{
				<div class="checkbox-container">
					<input type="checkbox" value="@method.Key" id="method_@method.Key"
					@onchange="e => HandleCheckboxChange(e, method.Key)"
						   checked="@(SelectedMoveMethods.Contains(method.Key))" />
					<label for="method_@method.Key">@method.Value</label>
					<br />
				</div>
			}
		</details>
		<div class="bordered-box-container">
			@foreach (var moveId in SelectedMoves)
			{
				<div @onclick="() => RemoveSelectedMove(moveId)" class="selectable-text">
					@GetMoveNameById(moveId) (ID: @moveId)
				</div>
			}
		</div>
	</div>
</div>
<button @onclick="FindWildPokemon" class="btn-find-pokemon">Find A Pokemon</button> <!-- class 추가 -->
@if (FilteredPokemonMoves.Any())
{
	<table class="table">
		<thead>
			<tr>
				<th @onclick="() => SortData(SortColumn.SpeciesId)">
					Pokemon No.
					@if (CurrentSortColumn == SortColumn.SpeciesId)
					{
						<span class="sort-arrow">@((IsAscendingSort) ? "⬆️" : "⬇️")</span>
					}
				</th>
				<th @onclick="() => SortData(SortColumn.Name)">
					Pokemon Name
					@if (CurrentSortColumn == SortColumn.Name)
					{
						<span class="sort-arrow">@((IsAscendingSort) ? "⬆️" : "⬇️")</span>
					}
				</th>
				<th>Type 1</th>
				<th>Type 2</th>
				<th>Ability 1</th>  <!-- 새로운 열 추가 -->
				<th>Ability 2</th>  <!-- 새로운 열 추가 -->
				<th>Hidden Abilitiy</th>  <!-- 새로운 열 추가 -->

				<th @onclick="() => SortData(SortColumn.NumberOfMoves)">
					Number of Moves
					@if (CurrentSortColumn == SortColumn.NumberOfMoves)
					{
						<span class="sort-arrow">@((IsAscendingSort) ? "⬆️" : "⬇️")</span>
					}
				</th>
				<th>Move Name</th>
				<th>Method</th>
				<th>Level</th>
			</tr>
		</thead>



		<tbody>

			@foreach (var group in groupedMoves)
			{
				bool firstRowForPokemon = true;
				foreach (var move in group.Moves)
				{

					<tr>
						@if (firstRowForPokemon)
						{
							var types = GetPokemonTypesById(group.PokemonId);
							var abilities = GetAbilityNamesByPokemonId(group.PokemonId);
							<td rowspan="@group.Moves.Count">@GetSpeciesIdById(group.PokemonId)</td>
							<td rowspan="@group.Moves.Count" class="clickable-pokemon-name" @onclick="@(e => { OnPokemonNameClicked(group.PokemonId); })">@GetPokemonNameById(group.PokemonId)</td>
							<td rowspan="@group.Moves.Count">@types.Item1</td>
							<td rowspan="@group.Moves.Count">@types.Item2</td>

							<td rowspan="@group.Moves.Count">@abilities.Item1</td>
							<td rowspan="@group.Moves.Count">@abilities.Item2</td>
							<td rowspan="@group.Moves.Count">@abilities.Item3</td>
							<td rowspan="@group.Moves.Count">@group.UniqueMoveCount</td>
							firstRowForPokemon = false;
						}
						<td>@GetMoveNameById(move.MoveId)</td>
						<td>@MoveMethods[move.PokemonMoveMethodId]</td>
						<td>
							@if (move.PokemonMoveMethodId == 1)
							{
								@(move.Level == 0 ? "Evo." : move.Level.ToString())
							}
						</td>
					</tr>
				}
			}
		</tbody>



	</table>
}
else
{
	<div class="no-results">
		<p>검색 결과가 없습니다.</p>
	</div>
}

<h3>Move Lookup</h3>

<textarea @bind="inputText" placeholder="Enter move names, one per line..." rows="10" cols="50"></textarea>
<br />
<button @onclick="LookupMoves">Lookup</button>

@if (results != null)
{
	<h5>Results:</h5>
	<ul>
		@foreach (var result in results)
		{
			<li>@result</li>
		}
	</ul>
}



<PokemonInfoLayer CurrentLanguageId="@CurrentLanguageId"
				  SelectedVersionId="@SelectedVersionId"
				  MoveNames="@MoveNames"
				  AllPokemonMoves="@AllPokemonMoves"
				  @ref="PokemonInfoLayerRef"/>


<style>

</style>
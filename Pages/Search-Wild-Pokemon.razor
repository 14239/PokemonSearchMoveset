@using PokemonSearchMoveset.Models
@using PokemonSearchMoveset.Services
@using Microsoft.JSInterop
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using PokemonSearchMoveset.Components


@page "/search-wild-pokemon"

@code {


    // CSV 로드

    private List<PokemonMoveCSV> AllPokemonMoves { get; set; } = new List<PokemonMoveCSV>();
    private List<PokemonCSV> Pokemons { get; set; } = new List<PokemonCSV>();
    private List<PokemonSpeciesNameCSV> PokemonNames { get; set; } = new List<PokemonSpeciesNameCSV>();
    private List<PokemonFormCSV> PokemonForms { get; set; } = new List<PokemonFormCSV>();
    private List<PokemonFormNameCSV> PokemonFormNames = new List<PokemonFormNameCSV>();
    private List<PokemonTypeCSV> PokemonTypes = new List<PokemonTypeCSV>();
    private List<PokemonTypePastCSV> PokemonTypesPast = new List<PokemonTypePastCSV>();
    private List<TypeNameCSV> TypeNames = new List<TypeNameCSV>();

    protected override void OnInitialized()
    {
        //Task.Run(async () => await LoadData());
    }


    private bool IsDataLoaded { get; set; } = false;

    private async Task LoadDataOnDemand()
    {
        if (!IsDataLoaded)
        {
            Console.WriteLine("Loading data..."); // 디버그 메시지 추가
            await LoadData();
            if (AllPokemonMoves.Count > 0)
            {
                Console.WriteLine($"Loaded {AllPokemonMoves.Count} rows."); // 데이터 로드 성공 확인
            }
            else
            {
                Console.WriteLine("No data loaded."); // 데이터 로드 실패 확인
            }
            IsDataLoaded = true;
            StateHasChanged();  // UI 갱신
        }
    }

    private async Task LoadData()
    {
        AllPokemonMoves = await CsvLoader.LoadPokemonMoves(Http, "database/pokemon_moves.csv") ?? new List<PokemonMoveCSV>();
        Pokemons = await CsvLoader.LoadPokemons(http: Http, path: "database/pokemon.csv");
        PokemonNames = await CsvLoader.LoadPokemonNames(http: Http, path: "database/pokemon_species_names.csv");
        PokemonForms = await CsvLoader.LoadPokemonForms(http: Http, path: "database/pokemon_forms.csv");
        PokemonFormNames = await CsvLoader.LoadPokemonFormNames(http: Http, path: "database/pokemon_form_names.csv");
        TypeNames = await CsvLoader.LoadTypeNames(http: Http, path: "database/type_names.csv");
        PokemonTypes = await CsvLoader.LoadPokemonTypes(http: Http, path: "database/pokemon_types.csv");
        PokemonTypesPast = await CsvLoader.LoadPokemonTypesPast(http: Http, path: "database/pokemon_types_past.csv");

    }


    // 언어 변경
    private int _previousLanguageId;

    [CascadingParameter(Name = "SelectedLanguageId")]
    public int CurrentLanguageId { get; set; }
    public int CurrentGenerationId { get; set; }

    protected override void OnParametersSet()
    {
        if (_previousLanguageId != CurrentLanguageId)
        {
            StateHasChanged();
            _previousLanguageId = CurrentLanguageId;
        }
    }


    private VersionSelect versionSelectComponent = new VersionSelect();
    private MoveSearch moveSearchComponent = new MoveSearch();

    // 데이터 가져오기

    private int SelectedVersionId { get; set; }

    private void HandleVersionChecked(int checkedVersionId)
    {
        SelectedVersionId = checkedVersionId;
        Console.WriteLine($"Version selected: {SelectedVersionId}"); // 디버그 메시지 추가
    }



    public List<int> SelectedMoves { get; set; } = new List<int>();

    private void HandleMoveSelected(MoveNameCSV selectedMove)
    {
        if (!SelectedMoves.Contains(selectedMove.MoveId))  // 중복 선택 체크
        {
            SelectedMoves.Add(selectedMove.MoveId);
            StateHasChanged();
        }
        else
        {
            SelectedMoves.Remove(selectedMove.MoveId);
            StateHasChanged();
        }
    }

    private void RemoveSelectedMove(int moveId)
    {
        SelectedMoves.Remove(moveId);
        StateHasChanged();
    }




    private List<PokemonMoveCSV> FilteredPokemonMoves { get; set; } = new List<PokemonMoveCSV>();
    private List<dynamic> groupedMoves = new List<dynamic>();


    private void FilterPokemonMoves()
    {
        // 조건에 맞는 데이터만 필터링합니다.
        Console.WriteLine(SelectedVersionId);
        Console.WriteLine(string.Join(", ", SelectedMoves)); // int 리스트이므로 그대로 출력

        FilteredPokemonMoves = AllPokemonMoves.Where(pm =>
            pm.VersionGroupId == SelectedVersionId &&   // 선택한 버
            pm.PokemonMoveMethodId == 1 &&              // 레벨업해서 기술을 배워야
            SelectedMoves.Contains(pm.MoveId)
        ).ToList();

        // 필터링 결과 확인
        Console.WriteLine($"Found {FilteredPokemonMoves.Count} matching moves."); // 디버그 메시지 추가
    }


    private async Task FindWildPokemon()
    {
        // CSV 데이터가 로드되지 않았다면 로드합니다.
        await LoadDataOnDemand();

        // 포켓몬 데이터 필터링
        FilterPokemonMoves();

        this.groupedMoves = FilteredPokemonMoves.GroupBy(move => move.PokemonId)
                .Select(group => (dynamic)new
                {
                    PokemonId = group.Key,
                    Moves = group.ToList(),
                    UniqueMoveCount = group.Select(m => m.MoveId).Distinct().Count()

                }).ToList();


        Console.WriteLine($"Number of grouped pokemons: {groupedMoves.Count}");
        StateHasChanged();
    }


    public string GetPokemonNameById(int id)
    {
        // PokemonCSV 목록에서 주어진 id와 일치하는 species_id를 찾습니다.
        int speciesId = Pokemons.FirstOrDefault(p => p.Id == id)?.SpeciesId ?? 0;

        // 해당 species_id와 현재 언어 설정을 사용하여 PokemonNames 목록에서 기본 이름을 찾습니다.
        string baseName = PokemonNames.FirstOrDefault(pn => pn.SpeciesId == speciesId && pn.LocalLanguageId == CurrentLanguageId)?.Name ?? $"Pokemon {id}";

        // 만약 id가 10,000 이상이면 PokemonFormNames에서 폼 이름을 추가적으로 찾아 반환합니다.
        if (id >= 10000)
        {
            var formId = PokemonForms.FirstOrDefault(pf => pf.PokemonId == id)?.Id ?? 0;
            var formName = PokemonFormNames.FirstOrDefault(pfn => pfn.PokemonFormId == formId && pfn.LocalLanguageId == CurrentLanguageId)?.FormName;
            if (!string.IsNullOrEmpty(formName))
            {
                return $"{baseName} {formName}";
            }
        }

        return baseName;
    }




    public string GetMoveNameById(int moveId)
    {
        var matchingMoveName = moveSearchComponent.MoveNames.FirstOrDefault(mn => mn.MoveId == moveId && mn.LocalLanguageId == CurrentLanguageId);
        return matchingMoveName?.Name ?? $"Move {moveId}";
    }




    public int GetSpeciesIdById(int Id)
    {
        return Pokemons.FirstOrDefault(p => p.Id == Id)?.SpeciesId ?? 0;
    }

    public string GetTypeNameById(int typeId, int languageId)
    {
        return TypeNames.FirstOrDefault(tn => tn.TypeId == typeId && tn.LocalLanguageId == languageId)?.Name ?? string.Empty;
    }

    public (string Type1, string Type2) GetPokemonTypesById(int pokemonId)
    {
        var types = PokemonTypes.Where(pt => pt.PokemonId == pokemonId).ToList();
        var typePast = PokemonTypesPast.FirstOrDefault(ptp => ptp.PokemonId == pokemonId && ptp.GenerationId >= versionSelectComponent.CurrentGenerationId);

        if (typePast != null)
        {
            // 만약 조건에 맞는 PokemonTypePast가 있으면 해당 타입을 사용합니다.
            string type1 = typePast.Slot == 1 ? GetTypeNameById(typePast.TypeId, CurrentLanguageId) : string.Empty;
            string type2 = typePast.Slot == 2 ? GetTypeNameById(typePast.TypeId, CurrentLanguageId) : string.Empty;
            return (type1, type2);
        }
        else
        {
            // 그렇지 않으면 기본 PokemonTypes를 사용합니다.
            string type1 = types.FirstOrDefault(t => t.Slot == 1) != null ? GetTypeNameById(types.First(t => t.Slot == 1).TypeId, CurrentLanguageId) : string.Empty;
            string type2 = types.FirstOrDefault(t => t.Slot == 2) != null ? GetTypeNameById(types.First(t => t.Slot == 2).TypeId, CurrentLanguageId) : string.Empty;
            return (type1, type2);
        }
    }




    // 표 정렬
    private enum SortColumn
    {
        SpeciesId,
        Name,
        NumberOfMoves,
        MoveName,
        Level
    }

    private SortColumn CurrentSortColumn { get; set; } = SortColumn.SpeciesId;
    private bool IsAscendingSort { get; set; } = true;

    private void SortData(SortColumn column)
    {
        if (CurrentSortColumn == column)
        {
            IsAscendingSort = !IsAscendingSort;
        }
        else
        {
            CurrentSortColumn = column;
            IsAscendingSort = true;
        }

        switch (column)
        {
            case SortColumn.Name:
                groupedMoves = IsAscendingSort ?
                    groupedMoves.OrderBy(group => GetPokemonNameById(group.PokemonId)).ToList() :
                    groupedMoves.OrderByDescending(group => GetPokemonNameById(group.PokemonId)).ToList();
                break;
            case SortColumn.SpeciesId:
                groupedMoves = IsAscendingSort ?
                    groupedMoves.OrderBy(group => GetSpeciesIdById(group.PokemonId)).ToList() :
                    groupedMoves.OrderByDescending(group => GetSpeciesIdById(group.PokemonId)).ToList();
                break;
            case SortColumn.NumberOfMoves:
                groupedMoves = IsAscendingSort ?
                    groupedMoves.OrderBy(group => group.Moves.Count).ToList() :
                    groupedMoves.OrderByDescending(group => group.Moves.Count).ToList();
                break;
        }

        StateHasChanged();
    }


}


<VersionSelect CurrentLanguageId="@CurrentLanguageId"  OnVersionSelected="HandleVersionChecked" @ref="versionSelectComponent" />

<div class="row">
    <MoveSearch CurrentLanguageId="@CurrentLanguageId" @ref="moveSearchComponent" OnMoveSelected="HandleMoveSelected" />
    <div class="col-md-6">

        <!-- 선택된 기술 목록 -->
        <h5>Selected Moves:</h5>
        <div class="gap"></div>
        <div class="bordered-box-container">
            @foreach (var moveId in SelectedMoves)
            {
                <div @onclick="() => RemoveSelectedMove(moveId)" class="selectable-text">
                    @GetMoveNameById(moveId) (ID: @moveId)
                </div>
            }
        </div>

    </div>
</div>
<button @onclick="FindWildPokemon">Find Wild Pokemon</button>
@if (FilteredPokemonMoves.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th @onclick="() => SortData(SortColumn.SpeciesId)">
                    Pokemon No.
                    @if (CurrentSortColumn == SortColumn.SpeciesId)
                    {
                        <span class="sort-arrow">@((IsAscendingSort) ? "⬆️" : "⬇️")</span>
                    }
                </th>
                <th @onclick="() => SortData(SortColumn.Name)">
                    Pokemon Name
                    @if (CurrentSortColumn == SortColumn.Name)
                    {
                        <span class="sort-arrow">@((IsAscendingSort) ? "⬆️" : "⬇️")</span>
                    }
                </th>
                <th @onclick="() => SortData(SortColumn.NumberOfMoves)">
                    Number of Moves
                    @if (CurrentSortColumn == SortColumn.NumberOfMoves)
                    {
                        <span class="sort-arrow">@((IsAscendingSort) ? "⬆️" : "⬇️")</span>
                    }
                </th>
                <th>Type 1</th>
                <th>Type 2</th>
                <th>Move Name</th>
                <th>Level</th>
            </tr>
        </thead>



        <tbody>
            @foreach (var group in groupedMoves)
            {
                bool firstRowForPokemon = true;
                foreach (var move in group.Moves)
                {
                    var types = GetPokemonTypesById(group.PokemonId);
                    <tr>
                        @if (firstRowForPokemon)
                        {
                            <td rowspan="@group.Moves.Count">@GetSpeciesIdById(group.PokemonId)</td>
                            <td rowspan="@group.Moves.Count">@GetPokemonNameById(group.PokemonId)</td>
                            <td rowspan="@group.Moves.Count">@group.UniqueMoveCount</td>
                            <td rowspan="@group.Moves.Count">@types.Item1</td>
                            <td rowspan="@group.Moves.Count">@types.Item2</td>
                            firstRowForPokemon = false;
                        }
                        <td>@GetMoveNameById(move.MoveId)</td>
                        <td>@(move.Level == 0 ? "Evo." : move.Level.ToString())</td>
                    </tr>
                }
            }
        </tbody>



    </table>
}

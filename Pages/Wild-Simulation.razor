@page "/wild-simulation"

@using Microsoft.AspNetCore.Components.Forms
@using PokemonSearchMoveset.Models
@using PokemonSearchMoveset.Services
@using Microsoft.JSInterop
@using PokemonSearchMoveset.Components
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject DataService DataService
@inject MoveInfoService MoveInfoService
@using System.Globalization
@using System.IO
@using System.Text
@using System.Collections.Generic
@using BlazorPanzoom

<div class="flow-chart-wrapper">
	<Panzoom @ref="panZoomComponent" WheelMode="WheelMode.ZoomWithWheel" PanzoomOptions="options">
		<div @ref="@context.ElementReference" class="flow-chart">
			@RenderAllElements()
		</div>
	</Panzoom>
</div>

<div class="pokemon-info">
	@if (selectedPokemon != null)
	{
		<span>@selectedPokemon.Name - 레벨: @selectedPokemon.Level</span>
	}
	else
	{
		<span>선택한 포켓몬이 없습니다.</span>
	}

</div>

<InputFile OnChange="LoadCsvData" />
<b></b>
<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@SimulationAll">시뮬레이션</MudButton>

@if (wildPokemons != null && wildPokemons.Count > 0)
{
	<MudTable Items="@wildPokemons" Filter="new Func<WildPokemon, bool>(FilterFunc)" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" RowsPerPage="10" Breakpoint="Breakpoint.Sm">
		<ToolBarContent>
			<MudText Typo="Typo.h6">Wild Pokemons</MudText>
			<MudSpacer />
			<MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
		</ToolBarContent>
		<HeaderContent>
			<MudTh>User ID</MudTh>
			<MudTh>Name</MudTh>
			<MudTh>Level</MudTh>
			<MudTh>Type1</MudTh>
			<MudTh>Type2</MudTh>
			<MudTh>Ability</MudTh>
			<MudTh>Move1</MudTh>
			<MudTh>Move2</MudTh>
			<MudTh>Move3</MudTh>
			<MudTh>Move4</MudTh>
			<MudTh>DangerCount</MudTh>
			<MudTh>내구력</MudTh>

		</HeaderContent>
		<RowTemplate>
			<MudTd DataLabel="ID">@context.Id</MudTd>
			<MudTd DataLabel="Name">@context.Name</MudTd>
			<MudTd DataLabel="Level">@context.Level</MudTd>
			<MudTd DataLabel="Type1">@context.Type1</MudTd>
			<MudTd DataLabel="Type2">@context.Type2</MudTd>
			<MudTd DataLabel="Ability">@GetAbilityNameById(context.Ability)</MudTd>
			<MudTd DataLabel="Move1">@GetMoveNameById(context.Move1)</MudTd>
			<MudTd DataLabel="Move2">@GetMoveNameById(context.Move2)</MudTd>
			<MudTd DataLabel="Move3">@GetMoveNameById(context.Move3)</MudTd>
			<MudTd DataLabel="Move4">@GetMoveNameById(context.Move4)</MudTd>
			<MudTd DataLabel="DangerCount">@context.DangerMoveCount</MudTd>
			<MudTd DataLabel="내구력">@context.FlingSurvivalOutcome</MudTd>
			<MudTd><MudButton Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" @onclick="(() => ShowLog(context))">Show Log</MudButton></MudTd>
			<MudTd>
				<MudButton Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" @onclick="(() => RunSimulation(context))">Run Simulation</MudButton>
			</MudTd>
		</RowTemplate>


		<PagerContent>
			<MudTablePager />
		</PagerContent>
	</MudTable>

	<div class="d-flex flex-wrap mt-4">
		<MudSwitch @bind-Checked="@hover" Color="Color.Primary">Hover</MudSwitch>
		<MudSwitch @bind-Checked="@dense" Color="Color.Secondary">Dense</MudSwitch>
		<MudSwitch @bind-Checked="@striped" Color="Color.Tertiary">Striped</MudSwitch>
		<MudSwitch @bind-Checked="@bordered" Color="Color.Warning">Bordered</MudSwitch>
	</div>
}

@if (selectedPokemonForLog != null)
{
	<div class="modal-overlay" @onclick="CloseLogModal">
		<div class="simple-modal">
			<h3>@selectedPokemonForLog.Name</h3>
			<p>Level: @selectedPokemonForLog.Level</p>
			<p>Logs:</p>
			<ul>
				@foreach (var node in selectedPokemonForLog.NodeList)
				{
					<li>@node.Title</li>
				}
			</ul>
			<button @onclick="CloseLogModal">닫기</button>
		</div>
	</div>
}


@code {
	[Inject]
	private DataService dataService { get; set; }


	private List<PokemonCSV> Pokemons { get; set; } = new List<PokemonCSV>();
	private List<PokemonAbilityCSV> AllPokemonAbilities { get; set; } = new List<PokemonAbilityCSV>();
	private List<AbilityNameCSV> AbilityNames { get; set; } = new List<AbilityNameCSV>();
	private List<PokemonMoveCSV> AllPokemonMoves { get; set; } = new List<PokemonMoveCSV>();
	private List<PokemonTypeCSV> PokemonTypes = new List<PokemonTypeCSV>();
	private List<TypeNameCSV> TypeNames = new List<TypeNameCSV>();
	public List<MoveNameCSV> MoveNames { get; set; } = new List<MoveNameCSV>();
	public static List<MoveCSV> Moves { get; set; } = new List<MoveCSV>();

	// 필터링된 데이터를 저장할 변수를 추가합니다.
	private List<PokemonMoveCSV> FilteredPokemonMoves { get; set; } = new List<PokemonMoveCSV>();



	protected override void OnInitialized()
	{
		Pokemons = dataService.Pokemons;
		AllPokemonAbilities = dataService.AllPokemonAbilities;
		AllPokemonMoves = dataService.AllPokemonMoves;
		PokemonTypes = dataService.PokemonTypes;
		TypeNames = dataService.TypeNames;
		MoveNames = dataService.MoveNames;
		Moves = dataService.Moves;
		AbilityNames = dataService.AbilityNames;



		FilteredPokemonMoves = AllPokemonMoves
			.Where(pm =>
				(pm.VersionGroupId == 25 || pm.VersionGroupId == 26) &&
				pm.PokemonMoveMethodId == 1)
			.ToList();

		CreateFlowChartExample();

	}

	// 언어 변경
	private int _previousLanguageId;

	[CascadingParameter(Name = "SelectedLanguageId")]
	public int CurrentLanguageId { get; set; }
	public int CurrentGenerationId { get; set; }

	protected override void OnParametersSet()
	{
		if (_previousLanguageId != CurrentLanguageId)
		{
			StateHasChanged();
			_previousLanguageId = CurrentLanguageId;
		}
	}



	public class PokemonLog
	{
		public List<string> TurnActions { get; set; } = new List<string>(); // 각 턴의 행동
		public int AccumulatedPokemonCount { get; set; } = 0; // 누적 포켓몬 사용 수
		public int SpecialActionCount { get; set; } = 0; // 특수 대처 횟수

		public void AddTurnAction(string action)
		{
			TurnActions.Add(action);
		}

		public void IncrementPokemonCount()
		{
			AccumulatedPokemonCount++;
		}

		public void IncrementSpecialActionCount()
		{
			SpecialActionCount++;
		}
	}

	public class WildPokemon // 레벨, 특성으로 분류함
	{
		public int Id { get; set; }
		public string Name { get; set; }
		public int Level { get; set; }
		public string Type1 { get; set; }
		public string Type2 { get; set; }
		public int Ability { get; set; }
		public int Move1 { get; set; }
		public int Move2 { get; set; }
		public int Move3 { get; set; }
		public int Move4 { get; set; }

		public List<FlowNode> NodeList { get; set; } = new List<FlowNode>();
		public PokemonLog Log { get; set; } = new PokemonLog(); // 로그 객체 포함

		public string DangerMoveCount { get; set; }
		public SurvivalOutcome FlingSurvivalOutcome { get; set; }

	}

	private List<WildPokemon> wildPokemons { get; set; } = new List<WildPokemon>();

	private async Task LoadCsvData(InputFileChangeEventArgs e)
	{
		var file = e.File;

		if (file != null)
		{
			var stream = file.OpenReadStream();
			using var reader = new StreamReader(stream);
			var csvData = await reader.ReadToEndAsync();

			wildPokemons = ParseInputData(csvData);
		}
	}
	private List<WildPokemon> ParseInputData(string csvData)
	{
		var lines = csvData.Split('\n').Skip(1).Where(line => !string.IsNullOrWhiteSpace(line)); // 첫 번째 행은 헤더이므로 생략하고 빈 행은 필터링
		var result = new List<WildPokemon>();

		foreach (var line in lines)
		{
			var values = line.Split(',').Select(val => val.Trim()).ToArray(); // 쉼표로 구분하고 공백 제거

			var wildPokemonForAbility1 = new WildPokemon
				{
					Id = int.Parse(values[0]),
					Name = values[1],
					Level = int.Parse(values[2]),
					Type1 = values[3],
					Type2 = values[4],
					Ability = int.Parse(values[5]),
					Move1 = string.IsNullOrEmpty(values[8]) ? -1 : int.Parse(values[8]),
					Move2 = string.IsNullOrEmpty(values[9]) ? -1 : int.Parse(values[9]),
					Move3 = string.IsNullOrEmpty(values[10]) ? -1 : int.Parse(values[10]),
					Move4 = string.IsNullOrEmpty(values[11]) ? -1 : int.Parse(values[11])
				};
			result.Add(wildPokemonForAbility1);

			// Ability2 값이 -1이 아닐 경우 별도의 포켓몬 객체로 추가
			if (values[6] != "-1")
			{
				var wildPokemonForAbility2 = new WildPokemon
					{
						Id = wildPokemonForAbility1.Id,
						Name = wildPokemonForAbility1.Name,
						Level = wildPokemonForAbility1.Level,
						Type1 = values[3],
						Type2 = values[4],
						Ability = int.Parse(values[6]),
						Move1 = wildPokemonForAbility1.Move1,
						Move2 = wildPokemonForAbility1.Move2,
						Move3 = wildPokemonForAbility1.Move3,
						Move4 = wildPokemonForAbility1.Move4
					};
				result.Add(wildPokemonForAbility2);
			}
		}

		return result;
	}
	private bool dense = false;
	private bool hover = true;
	private bool striped = false;
	private bool bordered = true;
	private string searchString = "";
	private bool _selectOnRowClick = true;
	private int rowsPerPage = 10;  // 초기 페이지당 행 수

	private bool FilterFunc(WildPokemon pokemon)
	{
		if (string.IsNullOrWhiteSpace(searchString))
			return true;
		if (pokemon.Name?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true)
			return true;
		if (pokemon.DangerMoveCount?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true)
			return true;
		return false;
	}


	private WildPokemon selectedPokemon = null;


	private WildPokemon selectedPokemonForLog = null;

	private void ShowLog(WildPokemon pokemon)
	{
		selectedPokemonForLog = pokemon;
	}

	private void CloseLogModal()
	{
		selectedPokemonForLog = null;
		StateHasChanged(); // UI 갱신을 트리거합니다.
	}

	// 기존의 CloseModal 메서드는 그대로 유지합니다.


	// 플로우차트

	private string RenderNode(FlowNode node)
	{
		if (node == null) return "";

		StringBuilder contentBuilder = new StringBuilder();
		string highlightedClass = node.IsHighlighted ? "highlighted" : "";

		int x = node.GetAbsoluteX(allNodes);
		int y = node.GetAbsoluteY(allNodes);

		string nodeContent = node.Type switch
		{
			NodeType.Start => $"<rect x='{x - 50}' y='{y - 20}' width='100' height='40' class='node start {highlightedClass}' ></rect><text x='{x}' y='{y}' class='node-text' text-anchor='middle' dominant-baseline='middle'>{node.Title}</text>",
			NodeType.Decision => $"<polygon points='{x - 0},{y - 30} {x + 100},{y + 0} {x - 0},{y + 30} {x - 100},{y + 0}' class='node decision {highlightedClass}'></polygon><text x='{x}' y='{y + 0}' class='node-text' text-anchor='middle' dominant-baseline='middle'>{node.Title}</text>",
			NodeType.Action => $"<rect x='{x - 60}' y='{y - 30}' width='120' height='60' class='node action {highlightedClass}'></rect><text x='{x}' y='{y}' class='node-text' text-anchor='middle' dominant-baseline='middle'>{node.Title}</text>",
			_ => ""
		};

		return nodeContent;
	}


	List<FlowNode> allNodes = new List<FlowNode>();


	private string RenderArrow(FlowNode node, bool isHighlightOnly)
	{
		StringBuilder arrowBuilder = new StringBuilder();

		foreach (Child childNode in node.Children)
		{
			if (childNode.IsHighlightedLine == isHighlightOnly)
			{
				int startX = node.GetAbsoluteX(allNodes);
				int startY = node.GetAbsoluteY(allNodes);
				int endX = childNode.Node.GetAbsoluteX(allNodes);
				int endY = childNode.Node.GetAbsoluteY(allNodes);

				int horizontalLength = endX - startX;
				int verticalLength = endY - startY;
				int halfVertical = verticalLength / 2;

				string highlightedClass = childNode.IsHighlightedLine ? "highlighted" : "";

				string pathData = $"M {startX} {startY} ";
				pathData += $"v {50} ";

				if (horizontalLength != 0)
				{
					pathData += $"h {horizontalLength} ";
				}

				pathData += $"v {verticalLength-50}";

				arrowBuilder.Append($"<path d='{pathData}' class='path {highlightedClass}'  />");

				if (childNode.ArrowLabel != null)
				{
					int midX = startX + horizontalLength / 2;
					int midY = startY + halfVertical;
					if(horizontalLength == 0)
					{
						arrowBuilder.Append($"<text x='{midX}' y='{midY}' class='arrow-label'>{childNode.ArrowLabel}</text>");
					}
					else
					{
						arrowBuilder.Append($"<text x='{midX}' y='{startY+50}' class='arrow-label'>{childNode.ArrowLabel}</text>");

					}	
				}
			}
		}

		return arrowBuilder.ToString();
	}

	private MarkupString RenderAllElements()
	{
		StringBuilder allElementsContent = new StringBuilder();
		allElementsContent.Append($"<svg viewBox='0 0 16000 9000'>"); // 1600x900 크기에 맞춰 viewBox 설정
																			// 먼저 모든 화살표를 그립니다.
																			// 먼저 highlighted가 아닌 화살표를 그린다.
		foreach (var node in allNodes)
		{
			allElementsContent.Append(RenderArrow(node, false).ToString());
		}

		// 그 다음 highlighted 화살표를 그린다.
		foreach (var node in allNodes)
		{
			allElementsContent.Append(RenderArrow(node, true).ToString());
		}

		// 다음으로 모든 노드를 그립니다.
		foreach (var node in allNodes)
		{
			allElementsContent.Append(RenderNode(node));
		}

		allElementsContent.Append("</svg>");
		return new MarkupString(allElementsContent.ToString());
	}
	// 팬줌
	private Panzoom panZoomComponent;
	private PanzoomOptions options = new PanzoomOptions
		{
			// 기존에 설정된 다른 옵션들
			MaxScale = 10.0 // 줌 인 최대 배율을 5로 설정
		};





	// 멤버 변수 선언
	private List<MoveInfo> DangerousMoves;
	private List<AbilityInfo> DangerousAbilities;

	// 기술
	private List<int> allMoveIds; 
	private List<int> ghostIds; // 목숨걸기, 교체불가 기술
	private List<int> explosionIds;
	private List<int> giftIds;
	private List<int> defenseIds;
	private List<int> recoilIds;
	private List<int> thrashIds;
	private List<int> priorityIds;
	private List<int> burnIds;
	private List<int> speedIds;


	// 특성
	private List<int> gasIds;
	private List<int> tauntImmuneIds;
	private List<int> unswapIds;


	// 라이프사이클 메서드
	protected override async Task OnInitializedAsync()
	{
		DangerousMoves = await MoveInfoService.LoadDangerousMovesAsync();
		DangerousAbilities = await MoveInfoService.LoadDangerousAbilitiesAsync();

		// Filter the MoveId based on Tier or TierName
		allMoveIds = DangerousMoves.Select(m => m.MoveId)
						.ToList();

		ghostIds = DangerousMoves.Where(m => m.Category == "교체불가기술" || m.Category == "목숨걸기")
								.Select(m => m.MoveId)
								.ToList();
		explosionIds = DangerousMoves.Where(m => m.TierName == "사용 절대금지" && m.Category == "폭발기술")
										.Select(m => m.MoveId)
										.ToList();

		giftIds = DangerousMoves.Where(m => m.TierName == "사용 절대금지" && m.Category == "희생변화기")
								.Select(m => m.MoveId)
								.ToList();
		defenseIds = DangerousMoves.Where(m => m.Tier == 6)
								.Select(m => m.MoveId)
								.ToList();
		recoilIds = DangerousMoves.Where(m => m.Tier == 11)
								.Select(m => m.MoveId)
								.ToList();
		thrashIds = DangerousMoves.Where(m => m.Tier == 12)
								.Select(m => m.MoveId)
								.ToList();
		priorityIds = DangerousMoves.Where(m => m.Tier == 8 || m.Tier == 9 || m.Tier == 10)
								.Select(m => m.MoveId)
								.ToList();
		burnIds = DangerousMoves.Where(m => m.Tier == 4)
								.Select(m => m.MoveId)
								.ToList();
		speedIds = DangerousMoves.Where(m => m.Tier == 3)
								.Select(m => m.MoveId)
								.ToList();


		gasIds = DangerousAbilities.Where(a => a.AbilityName == "화학변화가스")
								.Select(a => a.AbilityId)
								.ToList();
		tauntImmuneIds = DangerousAbilities.Where(a => a.Category == "도발불가")
						.Select(a => a.AbilityId)
						.ToList();
		unswapIds = DangerousAbilities.Where(a => a.Category == "교체제한")
						.Select(a => a.AbilityId)
						.ToList();
	}
	public void CreateFlowChartExample()
	{
		FlowNode startNode = new FlowNode
			{
				Type = NodeType.Start,
				Title = "시작",
				X = 8000,
				Y = 4000,
			};
		allNodes.Add(startNode);

		var decision1 = new FlowNode
			{
				Type = NodeType.Decision,
				Title = "목숨걸기나 교체불가기 보유?",
				X = 0,
				Y = 100,
			};
		allNodes.Add(decision1);

		var decision1_yes1 = new FlowNode
			{
				Type = NodeType.Action,
				Title = "고스트 선두 or 테라스탈",
				X = -150,
				Y = 100,
			};
		allNodes.Add(decision1_yes1);



		// 결정 노드 생성
		FlowNode decision2 = new FlowNode
			{
				Type = NodeType.Decision,
				Title = "폭발기 보유?",
				X = 0,
				Y = 200,
			};
		allNodes.Add(decision2);

		var decision2_1 = new FlowNode
			{
				Type = NodeType.Decision,
				Title = "화학변화가스?",
				X = 600,
				Y = 100,
			};
		allNodes.Add(decision2_1);
		var decision2_1_yes1 = new FlowNode
			{
				Type = NodeType.Action,
				Title = "흔들풍손 봉인",
				X = 150,
				Y = 600,
			};
		allNodes.Add(decision2_1_yes1);
		var decision2_1_yes2 = new FlowNode
			{
				Type = NodeType.Action,
				Title = "드레디어 앙코르 동료만들기",
				X = 0,
				Y = 600,
			};
		allNodes.Add(decision2_1_yes2);
		var decision2_1_no1 = new FlowNode
			{
				Type = NodeType.Action,
				Title = "골덕 선두",
				X = -150,
				Y = 200,
			};
		allNodes.Add(decision2_1_no1);


		var decision3 = new FlowNode
			{
				Type = NodeType.Decision,
				Title = "멸망의노래 or 추억의선물?",
				X = 0,
				Y = 400,
			};
		allNodes.Add(decision3);

		var decision3_1 = new FlowNode
			{
				Type = NodeType.Decision,
				Title = "4 변화기 포켓몬?",
				X = 450,
				Y = 100,
			};
		allNodes.Add(decision3_1);

		var decision3_1_yes1 = new FlowNode
			{
				Type = NodeType.Action,
				Title = "날개치는머리 봉인",
				X = 150,
				Y = 200,
			};
		allNodes.Add(decision3_1_yes1);

		var decision3_1_yes2 = new FlowNode
			{
				Type = NodeType.Action,
				Title = "골덕 앙코르",
				X = 0,
				Y = 600,
			};
		allNodes.Add(decision3_1_yes2);

		var decision3_2 = new FlowNode
			{
				Type = NodeType.Decision,
				Title = "도발 무시 특성?",
				X = -150,
				Y = 100,
			};
		allNodes.Add(decision3_2);

		var decision3_2_yes1 = new FlowNode
			{
				Type = NodeType.Action,
				Title = "루차불 도발",
				X = -150,
				Y = 100,
			};
		allNodes.Add(decision3_2_yes1);

		var decision3_2_no1 = new FlowNode
			{
				Type = NodeType.Action,
				Title = "도발",
				X = 150,
				Y = 100,
			};
		allNodes.Add(decision3_2_no1);


		var decision4 = new FlowNode
			{
				Type = NodeType.Decision,
				Title = "전부 위험기술?",
				X = 0,
				Y = 400,
			};
		allNodes.Add(decision4);

		var decision4_no1 = new FlowNode
			{
				Type = NodeType.Action,
				Title = "안전한 기술 앙코르",
				X = 0,
				Y = 500,
			};
		allNodes.Add(decision4_no1);

		var decision_defense = new FlowNode
			{
				Type = NodeType.Decision,
				Title = "방/특방 감소 기술 있음?",
				X = -300,
				Y = 100,
			};
		allNodes.Add(decision_defense);

		var decision_defense_yes1 = new FlowNode
			{
				Type = NodeType.Decision,
				Title = "스탯 6랭크 깎여도 버틸 수 있음?",
				X = 150,
				Y = 100,
			};
		allNodes.Add(decision_defense_yes1);

		var decision_defense_yes2 = new FlowNode
			{
				Type = NodeType.Action,
				Title = "이 기술 앙코르로 고정",
				X = 0,
				Y = 300,
			};
		allNodes.Add(decision_defense_yes2);

		var decision_abilSwap = new FlowNode
			{
				Type = NodeType.Decision,
				Title = "특성 교체 가능?",
				X = -300,
				Y = 200,
			};
		allNodes.Add(decision_abilSwap);

		var decision_recoil = new FlowNode
			{
				Type = NodeType.Decision,
				Title = "반동기 있음?",
				X = 150,
				Y = 200,
			};
		allNodes.Add(decision_recoil);

		var decision_recoil_yes1 = new FlowNode
			{
				Type = NodeType.Action,
				Title = "반동기 앙코르",
				X = 150,
				Y = 100,
			};
		allNodes.Add(decision_recoil_yes1);

		var decision_recoil_yes2 = new FlowNode
			{
				Type = NodeType.Action,
				Title = "픽시 스킬스왑",
				X = 0,
				Y = 100,
			};
		allNodes.Add(decision_recoil_yes2);

		var decision_thrash = new FlowNode
			{
				Type = NodeType.Decision,
				Title = "난동기 있음?",
				X = -150,
				Y = 100,
			};
		allNodes.Add(decision_thrash);

		var decision_thrash_yes1 = new FlowNode
			{
				Type = NodeType.Action,
				Title = "난동기 앙코르",
				X = 150,
				Y = 100,
			};
		allNodes.Add(decision_thrash_yes1);

		var decision_thrash_yes2 = new FlowNode
			{
				Type = NodeType.Action,
				Title = "드레디어 동료만들기",
				X = 0,
				Y = 100,
			};
		allNodes.Add(decision_thrash_yes2);

		var decision_priority = new FlowNode
			{
				Type = NodeType.Decision,
				Title = "우선도 높은 기술 있음?",
				X = -300,
				Y = 200,
			};
		allNodes.Add(decision_priority);

		var decision_priority_yes1 = new FlowNode
			{
				Type = NodeType.Action,
				Title = "선공기 쓴 턴에 앙코르",
				X = 150,
				Y = 300,
			};
		allNodes.Add(decision_priority_yes1);

		var decision_burn = new FlowNode
			{
				Type = NodeType.Decision,
				Title = "상태이상 기술 있음?",
				X = -300,
				Y = 400,
			};
		allNodes.Add(decision_burn);

		var decision_burn_yes1 = new FlowNode
			{
				Type = NodeType.Action,
				Title = "올리르바 화상 걸어두기",
				X = 150,
				Y = 100,
			};
		allNodes.Add(decision_burn_yes1);

		var decision_burn_yes2 = new FlowNode
			{
				Type = NodeType.Action,
				Title = "상태이상 기술 앙코르",
				X = 0,
				Y = 100,
			};
		allNodes.Add(decision_burn_yes2);

		var decision_speed = new FlowNode
			{
				Type = NodeType.Decision,
				Title = "스피드 변화 기술 있음?",
				X = -150,
				Y = 100,
			};
		allNodes.Add(decision_speed);

		var decision_speed_yes1 = new FlowNode
			{
				Type = NodeType.Action,
				Title = "앙코르(플랜B고정)",
				X = 150,
				Y = 100,
			};
		allNodes.Add(decision_speed_yes1);

		var action_unplayable = new FlowNode
			{
				Type = NodeType.Action,
				Title = "모든 기술이 위험함",
				X = -150,
				Y = 100,
			};
		allNodes.Add(action_unplayable);

		// 시작
		startNode.Children.Add(new Child(decision1, null, null));

		//목숨걸기 or 교체불가
		decision1.Children.Add(new Child(decision1_yes1, (pokemon) => CheckMoves(pokemon, ghostIds), "Yes"));
		decision1.Children.Add(new Child(decision2, (pokemon) => !CheckMoves(pokemon, ghostIds), "No"));
		decision1_yes1.Children.Add(new Child(decision2, null, null));

		// 자폭
		decision2.Children.Add(new Child(decision2_1, (pokemon) => CheckMoves(pokemon, explosionIds), "Yes"));
		decision2.Children.Add(new Child(decision3, (pokemon) => !CheckMoves(pokemon, explosionIds), "No"));

		decision2_1.Children.Add(new Child(decision2_1_yes1, (pokemon) => CheckAbilities(pokemon, gasIds), "Yes"));
		decision2_1.Children.Add(new Child(decision2_1_no1, (pokemon) => !CheckAbilities(pokemon, gasIds), "No"));
		decision2_1_yes1.Children.Add(new Child(decision2_1_yes2, null, "드레디어 교체"));
		//decision2_1_yes2.Children.Add(new Child(decision3, null, null));
		decision2_1_no1.Children.Add(new Child(decision3, null, null));

		// 자기희생기

		decision3.Children.Add(new Child(decision3_1, (pokemon) => CheckMoves(pokemon, giftIds), "Yes"));
		decision3.Children.Add(new Child(decision4, (pokemon) => !CheckMoves(pokemon, giftIds), "No"));

		decision3_1.Children.Add(new Child(decision3_1_yes1, (pokemon) => Check4StatusMoves(pokemon), "Yes"));
		decision3_1.Children.Add(new Child(decision3_2, (pokemon) => !Check4StatusMoves(pokemon), "No"));
		decision3_1_yes1.Children.Add(new Child(decision3_1_yes2, null, "골덕 교체"));


		decision3_2.Children.Add(new Child(decision3_2_yes1, (pokemon) => CheckAbilities(pokemon, tauntImmuneIds), "Yes"));
		decision3_2.Children.Add(new Child(decision3_2_no1, (pokemon) => !CheckAbilities(pokemon, tauntImmuneIds), "No"));
		decision3_2_yes1.Children.Add(new Child(decision4, null, null));
		decision3_2_no1.Children.Add(new Child(decision4, null, null));

		decision4.Children.Add(new Child(decision_priority, (pokemon) => CheckAllMoves(pokemon, allMoveIds), "Yes"));
		decision4.Children.Add(new Child(decision4_no1, (pokemon) => !CheckAllMoves(pokemon, allMoveIds), "No"));

		decision_priority.Children.Add(new Child(decision_defense, (pokemon) => !CheckMoves(pokemon, priorityIds), "No"));
		decision_priority.Children.Add(new Child(decision_priority_yes1, (pokemon) => CheckMoves(pokemon, priorityIds), "Yes"));


		decision_defense.Children.Add(new Child(decision_defense_yes1, (pokemon) => CheckMoves(pokemon, defenseIds), "Yes"));
		decision_defense.Children.Add(new Child(decision_abilSwap, (pokemon) => !CheckMoves(pokemon, defenseIds), "No"));
		decision_defense_yes1.Children.Add(new Child(decision_defense_yes2, null, "Yes"));
		decision_defense_yes1.Children.Add(new Child(decision_abilSwap, null, "No"));

		decision_abilSwap.Children.Add(new Child(decision_recoil, (pokemon) => !CheckAbilities(pokemon, unswapIds), "Yes"));
		decision_abilSwap.Children.Add(new Child(decision_burn, (pokemon) => CheckAbilities(pokemon, unswapIds), "No"));


		decision_recoil.Children.Add(new Child(decision_thrash, (pokemon) => !CheckMoves(pokemon, recoilIds), "No"));
		decision_recoil.Children.Add(new Child(decision_recoil_yes1, (pokemon) => CheckMoves(pokemon, recoilIds), "Yes"));
		decision_recoil_yes1.Children.Add(new Child(decision_recoil_yes2, null, "픽시 교체"));

		decision_thrash.Children.Add(new Child(decision_burn, (pokemon) => !CheckMoves(pokemon, thrashIds), "No"));
		decision_thrash.Children.Add(new Child(decision_thrash_yes1, (pokemon) => CheckMoves(pokemon, thrashIds), "Yes"));
		decision_thrash_yes1.Children.Add(new Child(decision_thrash_yes2, null, "드레디어 교체"));


		decision_burn.Children.Add(new Child(decision_burn_yes1, (pokemon) => CheckMoves(pokemon, burnIds), "Yes"));
		decision_burn.Children.Add(new Child(decision_speed, (pokemon) => !CheckMoves(pokemon, burnIds), "No"));
		decision_burn_yes1.Children.Add(new Child(decision_burn_yes2, null, null));

		decision_speed.Children.Add(new Child(decision_speed_yes1, (pokemon) => CheckMoves(pokemon, speedIds), "Yes"));
		decision_speed.Children.Add(new Child(action_unplayable, (pokemon) => !CheckMoves(pokemon, speedIds), "No"));


	}
	public static bool CheckMoves(WildPokemon pokemon, List<int> ids)
	{
		if (ids == null || ids.Count == 0) return false;
		return ids.Contains(pokemon.Move1) || ids.Contains(pokemon.Move2) || ids.Contains(pokemon.Move3) || ids.Contains(pokemon.Move4);
	}

	public static bool CheckAllMoves(WildPokemon pokemon, List<int> ids)
	{
		if (ids == null || ids.Count == 0) return false;

		// 각 Move가 -1이 아닐 경우에만 체크
		bool checkMove1 = pokemon.Move1 == -1 || ids.Contains(pokemon.Move1);
		bool checkMove2 = pokemon.Move2 == -1 || ids.Contains(pokemon.Move2);
		bool checkMove3 = pokemon.Move3 == -1 || ids.Contains(pokemon.Move3);
		bool checkMove4 = pokemon.Move4 == -1 || ids.Contains(pokemon.Move4);

		// 모든 Move가 조건을 만족해야 true 반환
		return checkMove1 && checkMove2 && checkMove3 && checkMove4;
	}


	public static bool CheckAbilities(WildPokemon pokemon, List<int> ids)
	{
		if (ids == null || ids.Count == 0) return false;
		return ids.Contains(pokemon.Ability);
	}

	public static bool CheckType(WildPokemon pokemon, string type)
	{
		return pokemon.Type1 == type;
	}

	public static bool Check4StatusMoves(WildPokemon pokemon)
	{
		// 각 move ID가 특수 공격인지 체크합니다.
		var isSpecial = new Func<int, bool>(moveId =>
			Moves.Any(move => move.Id == moveId && move.DamageClassId == 3));

		// pokemon.Move1 ~ Move4 모두 특수 기술인지 체크합니다.
		return isSpecial(pokemon.Move1) && isSpecial(pokemon.Move2) &&
						isSpecial(pokemon.Move3) && isSpecial(pokemon.Move4);
	}


	private void CalculateDangerMoveCount(WildPokemon pokemon)
	{
		int dangerousMoveCount = 0;
		List<int> dangerousMoveIds = DangerousMoves.Select(dm => dm.MoveId).ToList();

		if (dangerousMoveIds.Contains(pokemon.Move1)) dangerousMoveCount++;
		if (dangerousMoveIds.Contains(pokemon.Move2)) dangerousMoveCount++;
		if (dangerousMoveIds.Contains(pokemon.Move3)) dangerousMoveCount++;
		if (dangerousMoveIds.Contains(pokemon.Move4)) dangerousMoveCount++;

		pokemon.DangerMoveCount = $"{dangerousMoveCount} 개";
	}
	private void SimulationAll()
	{
		foreach (var pokemon in wildPokemons)
		{
			CalculateDangerMoveCount(pokemon);
			pokemon.FlingSurvivalOutcome = IsSurviveFling(pokemon);

		}
		StateHasChanged(); // UI 갱신을 트리거합니다.
	}




	public void RunSimulation(WildPokemon pokemon)
	{
		pokemon.NodeList = new List<FlowNode>();
		IsSurviveFling(pokemon);

		// 하이라이트 초기화
		foreach (FlowNode node in allNodes)
		{
			node.IsHighlighted = false;
			foreach (Child child in node.Children)
			{
				child.IsHighlightedLine = false;
			}
		}

		selectedPokemon = pokemon;

		FlowNode startNode = allNodes.FirstOrDefault(node => node.Type == NodeType.Start);
		if (startNode != null)
		{
			GenerateSimulation(startNode, pokemon);
		}
	}



	public void GenerateSimulation(FlowNode currentNode, WildPokemon pokemon)
	{
		// 현재 노드를 하이라이트
		currentNode.IsHighlighted = true;
		pokemon.NodeList.Add(currentNode);
		int nextNode = 0;
		// 현재 노드가 결정 노드인 경우
		if (currentNode.Type == NodeType.Decision)
		{
			for (int i = 0; i < currentNode.Children.Count; i++)
			{
				if (currentNode.Children[i].Condition != null &&
					currentNode.Children[i].Condition.Invoke(pokemon))
				{
					nextNode = i;
					break;
				}
			}
		}

		if (currentNode.Children.Count == 0)
		{
			return;
		}
		else
		{
			currentNode.Children[nextNode].IsHighlightedLine = true;

			GenerateSimulation(currentNode.Children[nextNode].Node, pokemon);
		}
	}


	public enum SurvivalOutcome
	{
		NotCalculated,
		CanSurvive,
		CanSurviveIfBurned,
		CannotSurvive
	}

	public SurvivalOutcome IsSurviveFling(WildPokemon pokemon)
	{
		// 종족값 계산
		int hpStat = dataService.PokemonStats.FirstOrDefault(stat => stat.PokemonId == pokemon.Id && stat.StatId == 1)?.BaseStat ?? 0;
		int defenseStat = dataService.PokemonStats.FirstOrDefault(stat => stat.PokemonId == pokemon.Id && stat.StatId == 3)?.BaseStat ?? 0;

		// 실제 HP 및 방어 수치 계산
		int actualHP = (int)Math.Floor(((hpStat * 2 + 100) * pokemon.Level / 100.0) + 10);
		int actualDefense = (int)Math.Floor(((defenseStat * 2 * pokemon.Level / 100.0) + 5) * 0.9);

		// 내던지기 피해량 계산
		double flingDamageCalc = Math.Floor((((2 * 79 / 5) + 2) * 10 * 103 / (double)actualDefense / 50) + 2) * 1.5;
		int flingDamage = (int)Math.Floor(flingDamageCalc);
		int burnedFlingDamage = (int)Math.Floor(flingDamageCalc / 2);
		int grassyTerrainRecovery = (int)Math.Floor(actualHP / 16.0) * 9;

		// 생존 여부 결정
		if (flingDamage <= grassyTerrainRecovery)
		{
			return SurvivalOutcome.CanSurvive;
		}
		else if (burnedFlingDamage <= grassyTerrainRecovery)
		{
			return SurvivalOutcome.CanSurviveIfBurned;
		}
		else
		{
			return SurvivalOutcome.CannotSurvive;
		}
		
	}



	public string GetMoveNameById(int moveId)
	{
		var matchingMoveName = MoveNames.FirstOrDefault(mn => mn.MoveId == moveId && mn.LocalLanguageId == CurrentLanguageId);
		return matchingMoveName?.Name ?? $"Move {moveId}";
	}

	public string GetAbilityNameById(int abilityId)
	{
		if (abilityId != -1)
		{
			var matchingAbilityName = AbilityNames.FirstOrDefault(mn => mn.AbilityId == abilityId && mn.LocalLanguageId == CurrentLanguageId);
			return matchingAbilityName?.Name ?? $"Ability {abilityId}";

		}
		else
		{
			return "";
		}

	}
}


@using PokemonSearchMoveset.Models
@using PokemonSearchMoveset.Services
@using Microsoft.JSInterop
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using PokemonSearchMoveset.Components
@inject DataService DataService


@page "/search-pokemon-party"







@code {

	[Inject]
	private DataService dataService { get; set; }
	// CSV 로드

	private List<PokemonAbilityCSV> AllPokemonAbilities { get; set; } = new List<PokemonAbilityCSV>();
	private List<PokemonMoveCSV> AllPokemonMoves { get; set; } = new List<PokemonMoveCSV>();
	private List<PokemonCSV> Pokemons { get; set; } = new List<PokemonCSV>();
	private List<PokemonSpeciesNameCSV> PokemonNames { get; set; } = new List<PokemonSpeciesNameCSV>();
	private List<PokemonFormCSV> PokemonForms { get; set; } = new List<PokemonFormCSV>();
	private List<PokemonFormNameCSV> PokemonFormNames = new List<PokemonFormNameCSV>();
	private List<PokemonTypeCSV> PokemonTypes = new List<PokemonTypeCSV>();
	private List<PokemonTypePastCSV> PokemonTypesPast = new List<PokemonTypePastCSV>();
	private List<TypeNameCSV> TypeNames = new List<TypeNameCSV>();
	public List<MoveNameCSV> MoveNames { get; set; } = new List<MoveNameCSV>();


	protected override void OnInitialized()
	{


		//Task.Run(async () => await LoadData());
		AllPokemonAbilities = dataService.AllPokemonAbilities;
		AllPokemonMoves = dataService.AllPokemonMoves;
		Pokemons = dataService.Pokemons;
		PokemonNames = dataService.PokemonNames;
		PokemonForms = dataService.PokemonForms;
		PokemonFormNames = dataService.PokemonFormNames;
		TypeNames = dataService.TypeNames;
		PokemonTypes = dataService.PokemonTypes;
		PokemonTypesPast = dataService.PokemonTypesPast;
		MoveNames = dataService.MoveNames;
	}


	// 언어 변경
	private int _previousLanguageId;

	[CascadingParameter(Name = "SelectedLanguageId")]
	public int CurrentLanguageId { get; set; }
	public int CurrentGenerationId { get; set; }

	protected override void OnParametersSet()
	{
		if (_previousLanguageId != CurrentLanguageId)
		{
			StateHasChanged();
			_previousLanguageId = CurrentLanguageId;
		}
	}


	private VersionSelect versionSelectComponent = new VersionSelect();


	// 데이터 가져오기

	private int SelectedVersionId { get; set; }

	private void HandleVersionChecked(int checkedVersionId)
	{
		SelectedVersionId = checkedVersionId;
		Console.WriteLine($"Version selected: {SelectedVersionId}"); // 디버그 메시지 추가
	}


	// Any 리스트에서 선택한 것들
	public List<int> SelectedTypes { get; set; } = new List<int>();
	public List<int> SelectedAbilities { get; set; } = new List<int>();
	public List<int> SelectedMoves { get; set; } = new List<int>();


	private MoveSearch moveSearchComponent = new MoveSearch();
	private AbilitySearch abilitySearchComponent = new AbilitySearch();
	private TypeSearch typeSearchComponent = new TypeSearch();
	private List<PokemonSlot> PokemonSlots = new List<PokemonSlot> { new PokemonSlot() };

	private void AddPokemonSlot()
	{
		PokemonSlots.Add(new PokemonSlot());
	}

	private void RemovePokemonSlot()
	{
		if (PokemonSlots.Count > 1)
		{
			PokemonSlots.RemoveAt(PokemonSlots.Count - 1);
		}
	}
	// Pokemon 1 ~ 6 용
	private class PokemonSlot
	{
		private AbilitySearch abilitySearchComponent = new AbilitySearch();
		private MoveSearch moveSearchComponent = new MoveSearch();
		public List<int> SelectedTypes { get; set; } = new List<int>();
		public List<int> SelectedAbilities { get; set; } = new List<int>();
		public List<int> SelectedMoves { get; set; } = new List<int>();

		public List<int> AddedMovesFromAny { get; set; } = new List<int>();

		// 슬롯 필터 적용된 포켓몬 리스트
		public List<int> InitialList { get; set; } = new List<int>();
		// 각 Any 필터링 생략 여부
		public List<bool> SkipAnyAbilityFilter { get; set; } = new List<bool>();
		public List<bool> SkipAnyTypeFilter { get; set; } = new List<bool>();
		public List<bool> SkipAnyMoveFilter { get; set; } = new List<bool>();
		// 필터 적용된 현재 상태 포켓몬 리스트
		public List<int> CurrentList { get; set; } = new List<int>();


		public PokemonSlot DeepCopy()
		{
			return new PokemonSlot
				{
					SelectedAbilities = this.SelectedAbilities.ToList(),
					SelectedMoves = this.SelectedMoves.ToList(),
					AddedMovesFromAny = this.AddedMovesFromAny.ToList(),
					InitialList = this.InitialList.ToList(),
					SkipAnyTypeFilter = this.SkipAnyTypeFilter.ToList(),
					SkipAnyAbilityFilter = this.SkipAnyAbilityFilter.ToList(),
					SkipAnyMoveFilter = this.SkipAnyMoveFilter.ToList(),
					CurrentList = this.CurrentList.ToList()
				};
		}
	}



	private void HandleTypeSelected(TypeNameCSV selectedType, int slot)
	{
		if (slot == 0)  // Any Pokemon
		{
			if (!SelectedTypes.Contains(selectedType.TypeId))
			{
				SelectedTypes.Add(selectedType.TypeId);
			}
			else
			{
				SelectedTypes.Remove(selectedType.TypeId);
			}
		}
		else  // Pokemon 1~6
		{
			if (!PokemonSlots[slot - 1].SelectedTypes.Contains(selectedType.TypeId))
			{
				if (PokemonSlots[slot - 1].SelectedTypes.Count < 2)
				{
					PokemonSlots[slot - 1].SelectedTypes.Add(selectedType.TypeId);
				}
			}
			else
			{
				PokemonSlots[slot - 1].SelectedTypes.Remove(selectedType.TypeId);
			}
		}
		StateHasChanged();
	}


	private void RemoveSelectedType(int typeId, int slot)
	{
		if (slot == 0)  // Any Pokemon
		{
			SelectedTypes.Remove(typeId);
			StateHasChanged();
		}
		else
		{
			PokemonSlots[slot - 1].SelectedTypes.Remove(typeId);
			StateHasChanged();

		}
	}





	private void HandleAbilitySelected(AbilityNameCSV selectedAbility, int slot)
	{
		if (slot == 0)  // Any Pokemon
		{
			if (!SelectedAbilities.Contains(selectedAbility.AbilityId))
			{
				SelectedAbilities.Add(selectedAbility.AbilityId);
			}
			else
			{
				SelectedAbilities.Remove(selectedAbility.AbilityId);
			}
		}
		else  // Pokemon 1~6
		{
			if (!PokemonSlots[slot - 1].SelectedAbilities.Contains(selectedAbility.AbilityId))
			{
				PokemonSlots[slot - 1].SelectedAbilities.Clear();  // 하나만 선택 가능
				PokemonSlots[slot - 1].SelectedAbilities.Add(selectedAbility.AbilityId);
			}
			else
			{
				PokemonSlots[slot - 1].SelectedAbilities.Remove(selectedAbility.AbilityId);
			}
		}
		StateHasChanged();
	}


	private void RemoveSelectedAbility(int abilityId, int slot)
	{
		if (slot == 0)  // Any Pokemon
		{
			SelectedAbilities.Remove(abilityId);
			StateHasChanged();
		}
		else
		{
			PokemonSlots[slot - 1].SelectedAbilities.Remove(abilityId);
			StateHasChanged();

		}
	}



	private void HandleMoveSelected(MoveNameCSV selectedMove, int slot)
	{
		if (slot == 0)  // Any Pokemon
		{
			if (!SelectedMoves.Contains(selectedMove.MoveId))
			{
				if (/*SelectedMoves.Count < 4*/1 > 0)
				{
					SelectedMoves.Add(selectedMove.MoveId);
				}
			}
			else
			{
				SelectedMoves.Remove(selectedMove.MoveId);
			}
		}
		else  // Pokemon 1~6
		{
			if (!PokemonSlots[slot - 1].SelectedMoves.Contains(selectedMove.MoveId))
			{
				if (PokemonSlots[slot - 1].SelectedMoves.Count < 4)
				{
					PokemonSlots[slot - 1].SelectedMoves.Add(selectedMove.MoveId);
				}
			}
			else
			{
				PokemonSlots[slot - 1].SelectedMoves.Remove(selectedMove.MoveId);
			}
		}
		StateHasChanged();
	}


	private void RemoveSelectedMove(int moveId, int slot)
	{
		if (slot == 0)  // Any Pokemon
		{
			SelectedMoves.Remove(moveId);
			StateHasChanged();
		}
		else
		{
			PokemonSlots[slot - 1].SelectedMoves.Remove(moveId);
			StateHasChanged();

		}
	}

	public List<int> SelectedMoveMethods { get; set; } = new List<int>() { 1 };


	private Dictionary<int, string> MoveMethods = new Dictionary<int, string>
	{
		{1, "Level Up"},
		{2, "Egg Move"},
		{3, "Move Tutor"},
		{4, "TM"},
		{5, "Stadium"},
		{6, "Light Ball"},
		{7, "Colosseum"},
		{8, "XD Shadow"},
		{9, "XD Purification"},
		{10, "Form Change"},
		{11, "Zygarde Cube"},
	};


	private void HandleCheckboxChange(ChangeEventArgs e, int methodKey)
	{
		bool isChecked = (bool)e.Value;

		if (isChecked)
		{
			if (!SelectedMoveMethods.Contains(methodKey))
			{
				SelectedMoveMethods.Add(methodKey);
			}
		}
		else
		{
			if (SelectedMoveMethods.Contains(methodKey))
			{
				SelectedMoveMethods.Remove(methodKey);
			}
		}
	}





	private List<dynamic> groupedMoves = new List<dynamic>();


	private bool isLoading = false;
	private List<PokemonSlot> DisplayPokemonSlots = new List<PokemonSlot>();


	private async void SearchPokemonParty()
	{
		isLoading = true;
		StateHasChanged();

		await Task.Run(() =>
	{
		// 현재 버전에 따라 FilteredPokemonTypes 업데이트
		UpdateFilteredPokemonTypesWithCurrentVersion();

		var result = new List<int>();

		// 초기 시작
		for (int i = 0; i < PokemonSlots.Count; i++)
		{
			// 각 슬롯 초기화 후 필터링 적용
			PokemonSlots[i].InitialList = new List<int>();
			PokemonSlots[i].CurrentList = PokemonSlots[i].InitialList;
			PokemonSlots[i].CurrentList = ApplySlotFilter(i);

			// AddedMovesFromAny를 -1로 초기화
			PokemonSlots[i].AddedMovesFromAny = Enumerable.Repeat(-1, SelectedMoves.Count).ToList();

			PokemonSlots[i].SkipAnyAbilityFilter = new List<bool>(SelectedAbilities.Count);
			for (int j = 0; j < SelectedAbilities.Count; j++)
				PokemonSlots[i].SkipAnyAbilityFilter.Add(false);

			PokemonSlots[i].SkipAnyMoveFilter = new List<bool>(SelectedMoves.Count);
			for (int j = 0; j < SelectedMoves.Count; j++)
				PokemonSlots[i].SkipAnyMoveFilter.Add(false);

			PokemonSlots[i].SkipAnyTypeFilter = new List<bool>(SelectedTypes.Count);
			for (int j = 0; j < SelectedTypes.Count; j++)
				PokemonSlots[i].SkipAnyTypeFilter.Add(false);
		}

		// Any 조건 검색
		SearchWithAnyConditions();

		// 디버그용 출력
		for (int i = 0; i < PokemonSlots.Count; i++)
		{
			Console.WriteLine($"Slot {i + 1}:");
			foreach (var pokemonId in PokemonSlots[i].CurrentList)
			{
				Console.WriteLine($" - Pokemon ID: {pokemonId}");
			}
		}

		DisplayPokemonSlots = PokemonSlots.Select(p => p.DeepCopy()).ToList();
	});
		isLoading = false;
		StateHasChanged();

	}


	private List<PokemonTypeCSV> FilteredPokemonTypes;

	private void UpdateFilteredPokemonTypesWithCurrentVersion()
	{
		// FilteredPokemonTypes를 원본 PokemonTypes로 초기화
		FilteredPokemonTypes = new List<PokemonTypeCSV>(PokemonTypes);

		var currentVersionPastTypes = PokemonTypesPast
			.Where(ptp => ptp.GenerationId == versionSelectComponent.CurrentGenerationId)
			.ToList();

		foreach (var pastType in currentVersionPastTypes)
		{
			// 해당 PokemonId의 항목을 FilteredPokemonTypes에서 제거
			FilteredPokemonTypes.RemoveAll(pt => pt.PokemonId == pastType.PokemonId && pt.Slot == pastType.Slot);

			// PokemonTypesPast의 정보로 FilteredPokemonTypes 업데이트
			FilteredPokemonTypes.Add(new PokemonTypeCSV
				{
					PokemonId = pastType.PokemonId,
					TypeId = pastType.TypeId,
					Slot = pastType.Slot
				});
		}
	}



	private List<int> ApplySlotFilter(int slot)
	{

		// 버전으로 필터링
		var filteredList = AllPokemonMoves.Where(pm => pm.VersionGroupId == SelectedVersionId).ToList();

		// 슬롯별 선택된 타입으로 필터링
		if (PokemonSlots[slot].SelectedTypes.Count > 0)
		{
			var pokemonsWithSelectedTypes = FilteredPokemonTypes.GroupBy(pt => pt.PokemonId)
				.Where(g => PokemonSlots[slot].SelectedTypes.All(typeId => g.Any(pt => pt.TypeId == typeId)))
				.Select(g => g.Key)
				.ToList();

			filteredList = filteredList.Where(pm => pokemonsWithSelectedTypes.Contains(pm.PokemonId)).ToList();
		}


		// 슬롯별 선택된 특성으로 필터링
		if (PokemonSlots[slot].SelectedAbilities.Count > 0)
		{
			var pokemonsWithSelectedAbilities = AllPokemonAbilities.Where(pa => PokemonSlots[slot].SelectedAbilities.Contains(pa.AbilityId))
				.Select(pa => pa.PokemonId).Distinct().ToList();

			filteredList = filteredList.Where(pm => pokemonsWithSelectedAbilities.Contains(pm.PokemonId)).ToList();
		}

		// 슬롯별 선택된 기술로 필터링
		if (PokemonSlots[slot].SelectedMoves.Count > 0)
		{
			var pokemonsWithSelectedMoves = AllPokemonMoves.GroupBy(pm => pm.PokemonId)
				.Where(g => PokemonSlots[slot].SelectedMoves.All(moveId => g.Any(pm => pm.MoveId == moveId)))
				.Select(g => g.Key)
				.ToList();

			filteredList = filteredList.Where(pm => pokemonsWithSelectedMoves.Contains(pm.PokemonId)).ToList();
		}

		// 포켓몬 ID만 반환
		return filteredList.Select(pm => pm.PokemonId).Distinct().ToList();
	}




	private bool ApplyAnyTypeToSlot(int typeId, int slot)
	{
		// 슬롯에 대한 포켓몬 ID 목록 필터링
		var currentPokemonIds = PokemonSlots[slot].CurrentList;

		// 현재 슬롯의 포켓몬 ID 목록과 일치하며 주어진 typeId 타입을 가진 포켓몬 목록 검색
		var pokemonsWithGivenType = FilteredPokemonTypes
			.Where(pt => currentPokemonIds.Contains(pt.PokemonId) && pt.TypeId == typeId)
			.Select(pt => pt.PokemonId)
			.Distinct()
			.ToList();

		if (pokemonsWithGivenType.Count > 0)
		{
			// 조건이 충족되면 CurrentList를 갱신하고 true 반환
			PokemonSlots[slot].CurrentList = pokemonsWithGivenType;
			return true;
		}
		else
		{
			// 조건이 충족되지 않으면 false 반환
			return false;
		}
	}





	private bool ApplyAnyAbilityToSlot(int abilityId, int slot)
	{
		// 슬롯에 대한 포켓몬 ID 목록 필터링
		var currentPokemonIds = PokemonSlots[slot].CurrentList;

		// 현재 슬롯의 포켓몬 ID 목록과 일치하며 주어진 abilityId 특성을 가진 포켓몬 목록 검색
		var pokemonsWithGivenAbility = AllPokemonAbilities
			.Where(pa => currentPokemonIds.Contains(pa.PokemonId) && pa.AbilityId == abilityId)
			.Select(pa => pa.PokemonId)
			.Distinct()
			.ToList();

		if (pokemonsWithGivenAbility.Count > 0)
		{
			// 조건이 충족되면 CurrentList를 갱신하고 true 반환
			PokemonSlots[slot].CurrentList = pokemonsWithGivenAbility;
			return true;
		}
		else
		{
			// 조건이 충족되지 않으면 false 반환
			return false;
		}
	}




	private bool ApplyAnyMoveToSlot(int abilityId, int slot)
	{
		// 슬롯에 대한 포켓몬 ID 목록 필터링
		var currentPokemonIds = PokemonSlots[slot].CurrentList;

		// 현재 슬롯의 포켓몬 ID 목록과 일치하며 주어진 abilityId 특성을 가진 포켓몬 목록 검색
		var pokemonsWithGivenMove = AllPokemonMoves
			.Where(pm => currentPokemonIds.Contains(pm.PokemonId) && pm.MoveId == abilityId)
			.Select(pm => pm.PokemonId)
			.Distinct()
			.ToList();

		if (pokemonsWithGivenMove.Count > 0)
		{
			// 조건이 충족되면 CurrentList를 갱신하고 true 반환
			PokemonSlots[slot].CurrentList = pokemonsWithGivenMove;
			return true;
		}
		else
		{
			// 조건이 충족되지 않으면 false 반환
			return false;
		}
	}


	private bool SearchWithAnyConditions()
	{
		for (int i = 0; i < SelectedTypes.Count; i++)
		{
			if (!SearchConditionForSlot(SelectedTypes[i], ApplyAnyTypeToSlot, i, FilterType.Type))
			{
				ResetAllSlotsToInitial(i, FilterType.Type);
				return false;
			}
		}

		for (int i = 0; i < SelectedAbilities.Count; i++)
		{
			if (!SearchConditionForSlot(SelectedAbilities[i], ApplyAnyAbilityToSlot, i, FilterType.Ability))
			{
				ResetAllSlotsToInitial(i, FilterType.Ability);
				return false;
			}
		}

		for (int i = 0; i < SelectedMoves.Count; i++)
		{
			if (!SearchConditionForSlot(SelectedMoves[i], ApplyAnyMoveToSlot, i, FilterType.Move))
			{
				ResetAllSlotsToInitial(i, FilterType.Move);
				return false;
			}
		}

		return true;
	}

	private enum FilterType
	{
		Type,
		Ability,
		Move
	}

	private bool SearchConditionForSlot(int conditionId, Func<int, int, bool> applyConditionFunction, int filterIndex, FilterType filterType)
	{
		for (int slot = 0; slot < PokemonSlots.Count; slot++)
		{
			bool shouldSkip = false;
			switch (filterType)
			{
				case FilterType.Type:
					shouldSkip = filterIndex < PokemonSlots[slot].SkipAnyTypeFilter.Count && PokemonSlots[slot].SkipAnyTypeFilter[filterIndex];
					break;
				case FilterType.Ability:
					shouldSkip = filterIndex < PokemonSlots[slot].SkipAnyAbilityFilter.Count && PokemonSlots[slot].SkipAnyAbilityFilter[filterIndex];
					break;
				case FilterType.Move:
					shouldSkip = filterIndex < PokemonSlots[slot].SkipAnyMoveFilter.Count && PokemonSlots[slot].SkipAnyMoveFilter[filterIndex];
					break;
			}

			if (shouldSkip) continue;

			if (applyConditionFunction(conditionId, slot))
			{
				if (filterType == FilterType.Move)
				{
					PokemonSlots[slot].AddedMovesFromAny.Add(conditionId);
				}
				return true;
			}
			else if (slot == PokemonSlots.Count - 1)
			{
				switch (filterType)
				{
					case FilterType.Type:
						PokemonSlots[slot].SkipAnyTypeFilter[filterIndex] = true;
						break;
					case FilterType.Ability:
						PokemonSlots[slot].SkipAnyAbilityFilter[filterIndex] = true;
						break;
					case FilterType.Move:
						PokemonSlots[slot].SkipAnyMoveFilter[filterIndex] = true;
						break;
				}
				ResetAllSlotsToInitial(filterIndex, filterType);
			}
		}
		return false;
	}



	private void ResetAllSlotsToInitial(int startingFilter, FilterType filterType)
	{
		for (int i = 0; i < PokemonSlots.Count; i++)
		{
			// 슬롯을 초기 상태로 되돌림
			PokemonSlots[i].CurrentList = new List<int>(PokemonSlots[i].InitialList);

			// SkipAnyAbilityFilter, SkipAnyMoveFilter, SkipAnyTypeFilter를 초기화
			switch (filterType)
			{
				case FilterType.Ability:
					for (int j = startingFilter; j < PokemonSlots[i].SkipAnyAbilityFilter.Count; j++)
					{
						PokemonSlots[i].SkipAnyAbilityFilter[j] = false;
					}
					break;
				case FilterType.Move:
					for (int j = startingFilter; j < PokemonSlots[i].SkipAnyMoveFilter.Count; j++)
					{
						PokemonSlots[i].SkipAnyMoveFilter[j] = false;
					}
					break;
				case FilterType.Type:
					// Type에 대한 Skip 필터가 있다면 여기에 초기화 코드를 추가하세요.
					break;
			}

			// 슬롯에 대한 필터를 다시 적용
			ApplySlotFilter(i);
		}
	}


	public string GetPokemonNameById(int id)
	{
		// PokemonCSV 목록에서 주어진 id와 일치하는 species_id를 찾습니다.
		int speciesId = Pokemons.FirstOrDefault(p => p.Id == id)?.SpeciesId ?? 0;

		// 해당 species_id와 현재 언어 설정을 사용하여 PokemonNames 목록에서 기본 이름을 찾습니다.
		string baseName = PokemonNames.FirstOrDefault(pn => pn.SpeciesId == speciesId && pn.LocalLanguageId == CurrentLanguageId)?.Name ?? $"Pokemon {id}";

		// 만약 id가 10,000 이상이면 PokemonFormNames에서 폼 이름을 추가적으로 찾아 반환합니다.
		if (id >= 10000)
		{
			var formId = PokemonForms.FirstOrDefault(pf => pf.PokemonId == id)?.Id ?? 0;
			var formName = PokemonFormNames.FirstOrDefault(pfn => pfn.PokemonFormId == formId && pfn.LocalLanguageId == CurrentLanguageId)?.FormName;
			if (!string.IsNullOrEmpty(formName))
			{
				return $"{baseName} {formName}";
			}
		}

		return baseName;
	}


	public string GetMoveNameById(int moveId)
	{
		var matchingMoveName = moveSearchComponent.MoveNames.FirstOrDefault(mn => mn.MoveId == moveId && mn.LocalLanguageId == CurrentLanguageId);
		return matchingMoveName?.Name ?? $"Move {moveId}";
	}




	public int GetSpeciesIdById(int Id)
	{
		return Pokemons.FirstOrDefault(p => p.Id == Id)?.SpeciesId ?? 0;
	}

	public string GetTypeNameById(int typeId)
	{
		return TypeNames.FirstOrDefault(tn => tn.TypeId == typeId && tn.LocalLanguageId == CurrentLanguageId)?.Name ?? string.Empty;
	}

	public (string Type1, string Type2) GetPokemonTypesById(int pokemonId)
	{
		var types = PokemonTypes.Where(pt => pt.PokemonId == pokemonId).ToList();
		var typePast = PokemonTypesPast.FirstOrDefault(ptp => ptp.PokemonId == pokemonId && ptp.GenerationId >= versionSelectComponent.CurrentGenerationId);

		if (typePast != null)
		{
			// 만약 조건에 맞는 PokemonTypePast가 있으면 해당 타입을 사용합니다.
			string type1 = typePast.Slot == 1 ? GetTypeNameById(typePast.TypeId) : string.Empty;
			string type2 = typePast.Slot == 2 ? GetTypeNameById(typePast.TypeId) : string.Empty;
			return (type1, type2);
		}
		else
		{
			// 그렇지 않으면 기본 PokemonTypes를 사용합니다.
			string type1 = types.FirstOrDefault(t => t.Slot == 1) != null ? GetTypeNameById(types.First(t => t.Slot == 1).TypeId) : string.Empty;
			string type2 = types.FirstOrDefault(t => t.Slot == 2) != null ? GetTypeNameById(types.First(t => t.Slot == 2).TypeId) : string.Empty;
			return (type1, type2);
		}
	}


	public string GetAbilityNameById(int abilityId)
	{
		if (abilityId != -1)
		{
			var matchingAbilityName = abilitySearchComponent.AbilityNames.FirstOrDefault(mn => mn.AbilityId == abilityId && mn.LocalLanguageId == CurrentLanguageId);
			return matchingAbilityName?.Name ?? $"Ability {abilityId}";

		}
		else
		{
			return "";
		}



	}

	public (string Ability1, string Ability2, string HiddenAbility) GetAbilityNamesByPokemonId(int pokemonId)
	{
		var abilities = AllPokemonAbilities.Where(pa => pa.PokemonId == pokemonId).ToList();

		string ability1 = GetAbilityNameById(abilities.FirstOrDefault(a => a.Slot == 1)?.AbilityId ?? -1);
		string ability2 = GetAbilityNameById(abilities.FirstOrDefault(a => a.Slot == 2)?.AbilityId ?? -1);
		string hiddenAbility = GetAbilityNameById(abilities.FirstOrDefault(a => a.Slot == 3)?.AbilityId ?? -1);

		return (ability1, ability2, hiddenAbility);
	}

	// 표 정렬
	private enum SortColumn
	{
		SpeciesId,
		Name,
		NumberOfMoves,
		MoveName,
		Level
	}

	private SortColumn CurrentSortColumn { get; set; } = SortColumn.SpeciesId;
	private bool IsAscendingSort { get; set; } = true;

	private void SortData(SortColumn column)
	{
		if (CurrentSortColumn == column)
		{
			IsAscendingSort = !IsAscendingSort;
		}
		else
		{
			CurrentSortColumn = column;
			IsAscendingSort = true;
		}

		switch (column)
		{
			case SortColumn.Name:
				groupedMoves = IsAscendingSort ?
					groupedMoves.OrderBy(group => GetPokemonNameById(group.PokemonId)).ToList() :
					groupedMoves.OrderByDescending(group => GetPokemonNameById(group.PokemonId)).ToList();
				break;
			case SortColumn.SpeciesId:
				groupedMoves = IsAscendingSort ?
					groupedMoves.OrderBy(group => GetSpeciesIdById(group.PokemonId)).ToList() :
					groupedMoves.OrderByDescending(group => GetSpeciesIdById(group.PokemonId)).ToList();
				break;
			case SortColumn.NumberOfMoves:
				groupedMoves = IsAscendingSort ?
					groupedMoves.OrderBy(group => group.Moves.Count).ToList() :
					groupedMoves.OrderByDescending(group => group.UniqueMoveCount).ToList();
				break;
		}

		StateHasChanged();
	}


	// 클릭 시 정보 표시 용도
	private PokemonInfoLayer PokemonInfoLayerRef;

	private void OnPokemonNameClicked(int pokemonId)
	{
		var types = GetPokemonTypesById(pokemonId);
		var abilities = GetAbilityNamesByPokemonId(pokemonId);

		PokemonInfoLayerRef.Show(pokemonId, GetPokemonNameById(pokemonId), types.Item1, types.Item2, abilities.Item1, abilities.Item2, abilities.Item3);
	}


}

@if (isLoading)
{
	<div class="loading-overlay">
		Loading...
	</div>
}


<div class="row">
	<div class="col-md-12 mb-3">
		<!-- mb-3 추가 -->
		<VersionSelect CurrentLanguageId="@CurrentLanguageId" OnVersionSelected="HandleVersionChecked" @ref="versionSelectComponent" />
	</div>


	<div>
		<h3>Any Pokemon</h3>
		<div class="row">
			<div class="col-md-2 mb-3">

				<!-- 타입 선택 (여러 개 선택 가능) -->
				<TypeSearch CurrentLanguageId="@CurrentLanguageId" @ref="typeSearchComponent" OnTypeSelected="(type) => HandleTypeSelected(type, 0)" />
			</div>
			<div class="col-md-2 mb-3">
				<h5>Selected Type:</h5>
				<div class="gap"></div>
				<!-- 선택한 타입 표시 -->
				<div class="bordered-box-container">
					@foreach (var typeId in SelectedTypes)
					{
						<div @onclick="() => RemoveSelectedType(typeId, 0)" class="selectable-text">
							@GetTypeNameById(typeId) (ID: @typeId)
						</div>
					}
				</div>
			</div>
			<div class="col-md-2 mb-3">

				<!-- 특성 선택 (여러 개 선택 가능) -->
				<AbilitySearch CurrentLanguageId="@CurrentLanguageId" @ref="abilitySearchComponent" OnAbilitySelected="(ability) => HandleAbilitySelected(ability, 0)" />
			</div>
			<div class="col-md-2 mb-3">
				<h5>Selected Abilities:</h5>
				<div class="gap"></div>
				<!-- 선택한 능력 표시 -->
				<div class="bordered-box-container">
					@foreach (var abilityId in SelectedAbilities)
					{
						<div @onclick="() => RemoveSelectedAbility(abilityId, 0)" class="selectable-text">
							@GetAbilityNameById(abilityId) (ID: @abilityId)
						</div>
					}
				</div>
			</div>
			<div class="col-md-2 mb-3">
				<!-- 기술 선택 -->
				<MoveSearch CurrentLanguageId="@CurrentLanguageId" @ref="moveSearchComponent" OnMoveSelected="(move) => HandleMoveSelected(move, 0)" />
			</div>
			<div class="col-md-2 mb-3">
				<h5>Selected Moves:</h5>
				<div class="gap"></div>
				<div class="bordered-box-container">
					@foreach (var moveId in SelectedMoves)
					{
						<div @onclick="() => RemoveSelectedMove(moveId, 0)" class="selectable-text">
							@GetMoveNameById(moveId) (ID: @moveId)
						</div>
					}
				</div>
			</div>

		</div>
		<button @onclick="AddPokemonSlot">+</button>
		@if (PokemonSlots.Count > 1)
		{
			<button @onclick="RemovePokemonSlot">-</button>
		}
		@for (var i = 0; i < PokemonSlots.Count; i++)
		{
			var slotNumber = i + 1; // 1-based slot number
			<div class="pokemon-slot">
				<h4>@($"Pokemon {slotNumber}")</h4>
				<div class="row">
					<div class="col-md-2 mb-3">

						<!-- 타입 선택 (여러 개 선택 가능) -->
						<TypeSearch CurrentLanguageId="@CurrentLanguageId" @ref="typeSearchComponent" OnTypeSelected="(type) => HandleTypeSelected(type, slotNumber)" />
					</div>
					<div class="col-md-2 mb-3">
						<h5>Selected Type:</h5>
						<div class="gap"></div>
						<!-- 선택한 타입 표시 -->
						<div class="bordered-box-container">
							@foreach (var typeId in PokemonSlots[i].SelectedTypes)
							{
								<div @onclick="() => RemoveSelectedType(typeId, slotNumber)" class="selectable-text">
									@GetTypeNameById(typeId) (ID: @typeId)
								</div>
							}
						</div>
					</div>
					
					<div class="col-md-2 mb-3">

						<!-- 특성 선택 (여러 개 선택 가능) -->
						<AbilitySearch CurrentLanguageId="@CurrentLanguageId" @ref="abilitySearchComponent" OnAbilitySelected="(ability) => HandleAbilitySelected(ability, slotNumber)" />
					</div>
					<div class="col-md-2 mb-3">
						<h5>Selected Abilities:</h5>
						<div class="gap"></div>
						<!-- 선택한 능력 표시 -->
						<div class="bordered-box-container">
							@foreach (var abilityId in PokemonSlots[i].SelectedAbilities)
							{
								<div @onclick="() => RemoveSelectedAbility(abilityId, slotNumber)" class="selectable-text">
									@GetAbilityNameById(abilityId) (ID: @abilityId)
								</div>
							}
						</div>
					</div>
					<div class="col-md-2 mb-3">
						<!-- 기술 선택 -->
						<MoveSearch CurrentLanguageId="@CurrentLanguageId" @ref="moveSearchComponent" OnMoveSelected="(move) => HandleMoveSelected(move, slotNumber)" />
					</div>
					<div class="col-md-2 mb-3">
						<h5>Selected Moves:</h5>
						<div class="gap"></div>
						<div class="bordered-box-container">
							@foreach (var moveId in PokemonSlots[i].SelectedMoves)
							{
								<div @onclick="() => RemoveSelectedMove(moveId, slotNumber)" class="selectable-text">
									@GetMoveNameById(moveId) (ID: @moveId)
								</div>
							}
						</div>
					</div>

				</div>
			</div>
		}


	</div>




</div>
<button @onclick="SearchPokemonParty" class="btn-find-pokemon">Search Pokemon Party</button> <!-- class 추가 -->
@if (PokemonSlots.Any())
{
	int totalPokemonCount = AllPokemonMoves
						.Where(pm => pm.VersionGroupId == SelectedVersionId)
						.Select(pm => pm.PokemonId)
						.Distinct()
						.Count();

	<table class="table">
		<thead>
			<tr>
				<th>Slot</th>
				<th>Pokemon No.</th>
				<th>Pokemon Name</th>
				<th>Type 1</th>
				<th>Type 2</th>
				<th>Ability 1</th>
				<th>Ability 2</th>
				<th>Hidden Ability</th>
				<th>Moves</th>
			</tr>
		</thead>

		<tbody>
			@for (int i = 0; i < DisplayPokemonSlots.Count; i++)
			{
				var slot = DisplayPokemonSlots[i];
				bool isFirstRowForSlot = true;

				if (slot.CurrentList.Count == totalPokemonCount)
				{
					<tr>
						<td>Slot @(i + 1)</td>
						<td></td>
						<td>All Pokemon</td>
						<td colspan="6"></td> <!-- 나머지 열들을 비웁니다 -->
					</tr>
				}
				else if (slot.CurrentList.Count == 0)
				{
					<tr>
						<td>Slot @(i + 1)</td>
						<td></td>
						<td>Pokemon Not Existed</td>
						<td colspan="6"></td> <!-- 나머지 열들을 비웁니다 -->
					</tr>
				}
				else
				{
					foreach (var pokemonId in slot.CurrentList)
					{
						var types = GetPokemonTypesById(pokemonId);
						var abilities = GetAbilityNamesByPokemonId(pokemonId);
						<tr>
							@if (isFirstRowForSlot)
							{
								<td rowspan="@slot.CurrentList.Count">Slot @(i + 1)</td>
								isFirstRowForSlot = false;
							}
							<td>@GetSpeciesIdById(pokemonId)</td>
							<td class="clickable-pokemon-name" @onclick="@(e => { OnPokemonNameClicked(pokemonId); })">@GetPokemonNameById(pokemonId)</td>
							<td>@types.Item1</td>
							<td>@types.Item2</td>
							<td>@abilities.Item1</td>
							<td>@abilities.Item2</td>
							<td>@abilities.Item3</td>
							<td>
								@foreach (var moveId in slot.SelectedMoves)
								{
									<span>@GetMoveNameById(moveId)</span>
									<br>
								}
								@foreach (var moveId in slot.AddedMovesFromAny)
								{
									if (moveId != -1)
									{
										<span>@GetMoveNameById(moveId)</span>
										<br>
									}
								}
							</td>
						</tr>
					}
				}
			}
		</tbody>
	</table>
}
else
{
	<div class="no-results">
		<p>검색 결과가 없습니다.</p>
	</div>
}

<PokemonInfoLayer CurrentLanguageId="@CurrentLanguageId"
				  SelectedVersionId="@SelectedVersionId"
				  MoveNames="@MoveNames"
				  AllPokemonMoves="@AllPokemonMoves"
@ref="PokemonInfoLayerRef" />



@using PokemonSearchMoveset.Models
@using PokemonSearchMoveset.Services
@using Microsoft.JSInterop
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using PokemonSearchMoveset.Components
@inject DataService DataService


@page "/search-pokemon-party"







@code {

	[Inject]
	private DataService dataService { get; set; }
	// CSV 로드

	private List<PokemonAbilityCSV> AllPokemonAbilities { get; set; } = new List<PokemonAbilityCSV>();
	private List<PokemonMoveCSV> AllPokemonMoves { get; set; } = new List<PokemonMoveCSV>();
	private List<PokemonCSV> Pokemons { get; set; } = new List<PokemonCSV>();
	private List<PokemonSpeciesNameCSV> PokemonNames { get; set; } = new List<PokemonSpeciesNameCSV>();
	private List<PokemonFormCSV> PokemonForms { get; set; } = new List<PokemonFormCSV>();
	private List<PokemonFormNameCSV> PokemonFormNames = new List<PokemonFormNameCSV>();
	private List<PokemonTypeCSV> PokemonTypes = new List<PokemonTypeCSV>();
	private List<PokemonTypePastCSV> PokemonTypesPast = new List<PokemonTypePastCSV>();
	private List<TypeNameCSV> TypeNames = new List<TypeNameCSV>();



	protected override void OnInitialized()
	{


		//Task.Run(async () => await LoadData());
		AllPokemonAbilities = dataService.AllPokemonAbilities;
		AllPokemonMoves = dataService.AllPokemonMoves;
		Pokemons = dataService.Pokemons;
		PokemonNames = dataService.PokemonNames;
		PokemonForms = dataService.PokemonForms;
		PokemonFormNames = dataService.PokemonFormNames;
		TypeNames = dataService.TypeNames;
		PokemonTypes = dataService.PokemonTypes;
		PokemonTypesPast = dataService.PokemonTypesPast;
	}


	// 언어 변경
	private int _previousLanguageId;

	[CascadingParameter(Name = "SelectedLanguageId")]
	public int CurrentLanguageId { get; set; }
	public int CurrentGenerationId { get; set; }

	protected override void OnParametersSet()
	{
		if (_previousLanguageId != CurrentLanguageId)
		{
			StateHasChanged();
			_previousLanguageId = CurrentLanguageId;
		}
	}


	private VersionSelect versionSelectComponent = new VersionSelect();


	// 데이터 가져오기

	private int SelectedVersionId { get; set; }

	private void HandleVersionChecked(int checkedVersionId)
	{
		SelectedVersionId = checkedVersionId;
		Console.WriteLine($"Version selected: {SelectedVersionId}"); // 디버그 메시지 추가
	}


	// Any 리스트에서 선택한 것들
	public List<int> SelectedAbilities { get; set; } = new List<int>();
	public List<int> SelectedMoves { get; set; } = new List<int>();


	private MoveSearch moveSearchComponent = new MoveSearch();
	private AbilitySearch abilitySearchComponent = new AbilitySearch();
	private List<PokemonSlot> PokemonSlots = new List<PokemonSlot> { new PokemonSlot() };

	private void AddPokemonSlot()
	{
		PokemonSlots.Add(new PokemonSlot());
	}

	private void RemovePokemonSlot()
	{
		if (PokemonSlots.Count > 1)
		{
			PokemonSlots.RemoveAt(PokemonSlots.Count - 1);
		}
	}
	// Pokemon 1 ~ 6 용
	private class PokemonSlot
	{
		private AbilitySearch abilitySearchComponent = new AbilitySearch();
		private MoveSearch moveSearchComponent = new MoveSearch();
		public List<int> SelectedAbilities { get; set; } = new List<int>();
		public List<int> SelectedMoves { get; set; } = new List<int>();

		public List<int> AddedMovesFromAny { get; set; } = new List<int>();

		// 슬롯 필터 적용된 포켓몬 리스트
		public List<int> InitialList { get; set; } = new List<int>();
		// 각 Any 필터링 생략 여부
		public List<bool> SkipAnyAbilityFilter { get; set; } = new List<bool>();
		public List<bool> SkipAnyMoveFilter { get; set; } = new List<bool>();
		// 필터 적용된 현재 상태 포켓몬 리스트
		public List<int> CurrentList { get; set; } = new List<int>();

	}








	private void HandleAbilitySelected(AbilityNameCSV selectedAbility, int slot)
	{
		if (slot == 0)  // Any Pokemon
		{
			if (!SelectedAbilities.Contains(selectedAbility.AbilityId))
			{
				SelectedAbilities.Add(selectedAbility.AbilityId);
			}
			else
			{
				SelectedAbilities.Remove(selectedAbility.AbilityId);
			}
		}
		else  // Pokemon 1~6
		{
			if (!PokemonSlots[slot - 1].SelectedAbilities.Contains(selectedAbility.AbilityId))
			{
				PokemonSlots[slot - 1].SelectedAbilities.Clear();  // 하나만 선택 가능
				PokemonSlots[slot - 1].SelectedAbilities.Add(selectedAbility.AbilityId);
			}
			else
			{
				PokemonSlots[slot - 1].SelectedAbilities.Remove(selectedAbility.AbilityId);
			}
		}
		StateHasChanged();
	}


	private void RemoveSelectedAbility(int abilityId)
	{
		SelectedAbilities.Remove(abilityId);
		StateHasChanged();
	}



	private void HandleMoveSelected(MoveNameCSV selectedMove, int slot)
	{
		if (slot == 0)  // Any Pokemon
		{
			if (!SelectedMoves.Contains(selectedMove.MoveId))
			{
				if (/*SelectedMoves.Count < 4*/1 > 0)
				{
					SelectedMoves.Add(selectedMove.MoveId);
				}
			}
			else
			{
				SelectedMoves.Remove(selectedMove.MoveId);
			}
		}
		else  // Pokemon 1~6
		{
			if (!PokemonSlots[slot - 1].SelectedMoves.Contains(selectedMove.MoveId))
			{
				if (PokemonSlots[slot - 1].SelectedMoves.Count < 4)
				{
					PokemonSlots[slot - 1].SelectedMoves.Add(selectedMove.MoveId);
				}
			}
			else
			{
				PokemonSlots[slot - 1].SelectedMoves.Remove(selectedMove.MoveId);
			}
		}
		StateHasChanged();
	}


	private void RemoveSelectedMove(int moveId)
	{
		SelectedMoves.Remove(moveId);
		StateHasChanged();
	}

	public List<int> SelectedMoveMethods { get; set; } = new List<int>() { 1 };


	private Dictionary<int, string> MoveMethods = new Dictionary<int, string>
	{
		{1, "Level Up"},
		{2, "Egg Move"},
		{3, "Move Tutor"},
		{4, "TM"},
		{5, "Stadium"},
		{6, "Light Ball"},
		{7, "Colosseum"},
		{8, "XD Shadow"},
		{9, "XD Purification"},
		{10, "Form Change"},
		{11, "Zygarde Cube"},
	};


	private void HandleCheckboxChange(ChangeEventArgs e, int methodKey)
	{
		bool isChecked = (bool)e.Value;

		if (isChecked)
		{
			if (!SelectedMoveMethods.Contains(methodKey))
			{
				SelectedMoveMethods.Add(methodKey);
			}
		}
		else
		{
			if (SelectedMoveMethods.Contains(methodKey))
			{
				SelectedMoveMethods.Remove(methodKey);
			}
		}
	}









	private List<PokemonMoveCSV> FilteredPokemonMoves { get; set; } = new List<PokemonMoveCSV>();
	private List<dynamic> groupedMoves = new List<dynamic>();


	private void SearchPokemonParty()
	{
		var result = new List<int>();

		// 초기 시작
		for (int i = 0; i < PokemonSlots.Count; i++)
		{
			// 각 슬롯 초기화 후 필터링 적용
			PokemonSlots[i].InitialList = new List<int>();
			PokemonSlots[i].CurrentList = PokemonSlots[i].InitialList;
			PokemonSlots[i].CurrentList = ApplySlotFilter(i);

			// AddedMovesFromAny를 -1로 초기화
			PokemonSlots[i].AddedMovesFromAny = Enumerable.Repeat(-1, SelectedMoves.Count).ToList();

			PokemonSlots[i].SkipAnyAbilityFilter = new List<bool>(SelectedAbilities.Count);
			for (int j = 0; j < SelectedAbilities.Count; j++)
				PokemonSlots[i].SkipAnyAbilityFilter.Add(false);

			PokemonSlots[i].SkipAnyMoveFilter = new List<bool>(SelectedMoves.Count);
			for (int j = 0; j < SelectedMoves.Count; j++)
				PokemonSlots[i].SkipAnyMoveFilter.Add(false);
		}

		// Any 조건 검색
		SearchWithAnyConditions();

		// 디버그용 출력
		for (int i = 0; i < PokemonSlots.Count; i++)
		{
			Console.WriteLine($"Slot {i + 1}:");
			foreach (var pokemonId in PokemonSlots[i].CurrentList)
			{
				Console.WriteLine($" - Pokemon ID: {pokemonId}");
			}
		}
	}





	// 초기 세팅
	private List<int> ApplySlotFilter(int slot)
	{
		// 버전으로 필터링
		var filteredList = AllPokemonMoves.Where(pm => pm.VersionGroupId == SelectedVersionId).ToList();

		// 슬롯별 선택된 특성과 기술로 필터링
		// 예: SlotAbilities[slot], SlotMoves[slot]
		if (PokemonSlots[slot].SelectedAbilities.Count > 0)
		{
			var pokemonsWithSelectedAbilities = AllPokemonAbilities.Where(pa => PokemonSlots[slot].SelectedAbilities.Contains(pa.AbilityId))
				.Select(pa => pa.PokemonId).Distinct().ToList();

			filteredList = filteredList.Where(pm => pokemonsWithSelectedAbilities.Contains(pm.PokemonId)).ToList();
		}
		if (PokemonSlots[slot].SelectedMoves.Count > 0)
		{
			filteredList = filteredList.Where(pm =>
				PokemonSlots[slot].SelectedMoves.Contains(pm.MoveId)
			).ToList();
		}
		// 포켓몬 ID만 반환
		return filteredList.Select(pm => pm.PokemonId).Distinct().ToList();
	}





	private bool ApplyAnyAbilityToSlot(int abilityId, int slot)
	{
		// 슬롯에 대한 포켓몬 ID 목록 필터링
		var currentPokemonIds = PokemonSlots[slot].CurrentList;

		// 현재 슬롯의 포켓몬 ID 목록과 일치하며 주어진 abilityId 특성을 가진 포켓몬 목록 검색
		var pokemonsWithGivenAbility = AllPokemonAbilities
			.Where(pa => currentPokemonIds.Contains(pa.PokemonId) && pa.AbilityId == abilityId)
			.Select(pa => pa.PokemonId)
			.Distinct()
			.ToList();

		if (pokemonsWithGivenAbility.Count > 0)
		{
			// 조건이 충족되면 CurrentList를 갱신하고 true 반환
			PokemonSlots[slot].CurrentList = pokemonsWithGivenAbility;
			return true;
		}
		else
		{
			// 조건이 충족되지 않으면 false 반환
			return false;
		}
	}




	private bool ApplyAnyMoveToSlot(int abilityId, int slot)
	{
		// 슬롯에 대한 포켓몬 ID 목록 필터링
		var currentPokemonIds = PokemonSlots[slot].CurrentList;

		// 현재 슬롯의 포켓몬 ID 목록과 일치하며 주어진 abilityId 특성을 가진 포켓몬 목록 검색
		var pokemonsWithGivenMove = AllPokemonMoves
			.Where(pm => currentPokemonIds.Contains(pm.PokemonId) && pm.MoveId == abilityId)
			.Select(pm => pm.PokemonId)
			.Distinct()
			.ToList();

		if (pokemonsWithGivenMove.Count > 0)
		{
			// 조건이 충족되면 CurrentList를 갱신하고 true 반환
			PokemonSlots[slot].CurrentList = pokemonsWithGivenMove;
			return true;
		}
		else
		{
			// 조건이 충족되지 않으면 false 반환
			return false;
		}
	}


	private bool SearchWithAnyConditions()
	{
		for (int i = 0; i < SelectedAbilities.Count; i++)
		{
			if (!SearchConditionForSlot(SelectedAbilities[i], ApplyAnyAbilityToSlot, i, true))
			{
				ResetAllSlotsToInitial(i, true);
				return false;
			}
		}

		for (int i = 0; i < SelectedMoves.Count; i++)
		{
			if (!SearchConditionForSlot(SelectedMoves[i], ApplyAnyMoveToSlot, i, false))
			{
				ResetAllSlotsToInitial(i, false);
				return false;
			}
		}

		return true;
	}

	private bool SearchConditionForSlot(int conditionId, Func<int, int, bool> applyConditionFunction, int filterIndex, bool isAbility)
	{
		for (int slot = 0; slot < PokemonSlots.Count; slot++)
		{
			if ((isAbility && filterIndex < PokemonSlots[slot].SkipAnyAbilityFilter.Count && PokemonSlots[slot].SkipAnyAbilityFilter[filterIndex]) ||
				(!isAbility && filterIndex < PokemonSlots[slot].SkipAnyMoveFilter.Count && PokemonSlots[slot].SkipAnyMoveFilter[filterIndex]))

				continue;  // 해당 슬롯은 건너뜁니다.

			if (applyConditionFunction(conditionId, slot))
			{
				if (!isAbility)
				{
					PokemonSlots[slot].AddedMovesFromAny.Add(conditionId);  // 이 부분 추가
					return true;
				}
				else return true;
			}
			else if (slot == PokemonSlots.Count - 1) // 마지막 슬롯에 도달했을 때
			{
				if (isAbility)
				{
					PokemonSlots[slot].SkipAnyAbilityFilter[filterIndex] = true;
				}
				else
				{
					PokemonSlots[slot].SkipAnyMoveFilter[filterIndex] = true;
				}
				ResetAllSlotsToInitial(filterIndex, isAbility);
			}
		}
		return false;
	}


	private void ResetAllSlotsToInitial(int startingFilter, bool isAbility)
	{
		for (int i = 0; i < PokemonSlots.Count; i++)
		{
			// 슬롯을 초기 상태로 되돌림
			PokemonSlots[i].CurrentList = new List<int>(PokemonSlots[i].InitialList);

			// SkipAnyAbilityFilter와 SkipAnyMoveFilter를 초기화
			if (isAbility)
			{
				for (int j = startingFilter + 1; j < PokemonSlots[i].SkipAnyAbilityFilter.Count; j++)
				{
					PokemonSlots[i].SkipAnyAbilityFilter[j] = false;
				}
			}
			else
			{
				for (int j = startingFilter + 1; j < PokemonSlots[i].SkipAnyMoveFilter.Count; j++)
				{
					PokemonSlots[i].SkipAnyMoveFilter[j] = false;
				}
			}

			// 슬롯에 대한 필터를 다시 적용
			ApplySlotFilter(i);
		}
	}




	private void FilterPokemonMoves()
	{
		// 1. 버전으로 필터링
		FilteredPokemonMoves = AllPokemonMoves.Where(pm =>
			pm.VersionGroupId == SelectedVersionId
		).ToList();

		// 2. 특성으로 필터링 (선택된 특성이 있는 경우만)
		if (SelectedAbilities.Count > 0)
		{
			var pokemonsWithSelectedAbilities = AllPokemonAbilities.Where(pa =>
				SelectedAbilities.Contains(pa.AbilityId)
			).Select(pa => pa.PokemonId).Distinct().ToList();

			FilteredPokemonMoves = FilteredPokemonMoves.Where(pm =>
				pokemonsWithSelectedAbilities.Contains(pm.PokemonId)
			).ToList();
		}

		// 3. 기술로 필터링
		FilteredPokemonMoves = FilteredPokemonMoves.Where(pm =>
			SelectedMoveMethods.Contains(pm.PokemonMoveMethodId) &&   // 선택된 method
			SelectedMoves.Contains(pm.MoveId)
		).ToList();

		// 필터링 결과 확인
		Console.WriteLine($"Found {FilteredPokemonMoves.Count} matching moves."); // 디버그 메시지 추가
	}



	private async Task FindPokemonParty()
	{
		// CSV 데이터가 로드되지 않았다면 로드합니다.
		//await LoadDataOnDemand();

		// 포켓몬 데이터 필터링
		FilterPokemonMoves();

		this.groupedMoves = FilteredPokemonMoves.GroupBy(move => move.PokemonId)
				.Select(group => (dynamic)new
				{
					PokemonId = group.Key,
					Moves = group.ToList(),
					UniqueMoveCount = group.Select(m => m.MoveId).Distinct().Count()

				}).ToList();


		Console.WriteLine($"Number of grouped pokemons: {groupedMoves.Count}");
		StateHasChanged();
	}


	public string GetPokemonNameById(int id)
	{
		// PokemonCSV 목록에서 주어진 id와 일치하는 species_id를 찾습니다.
		int speciesId = Pokemons.FirstOrDefault(p => p.Id == id)?.SpeciesId ?? 0;

		// 해당 species_id와 현재 언어 설정을 사용하여 PokemonNames 목록에서 기본 이름을 찾습니다.
		string baseName = PokemonNames.FirstOrDefault(pn => pn.SpeciesId == speciesId && pn.LocalLanguageId == CurrentLanguageId)?.Name ?? $"Pokemon {id}";

		// 만약 id가 10,000 이상이면 PokemonFormNames에서 폼 이름을 추가적으로 찾아 반환합니다.
		if (id >= 10000)
		{
			var formId = PokemonForms.FirstOrDefault(pf => pf.PokemonId == id)?.Id ?? 0;
			var formName = PokemonFormNames.FirstOrDefault(pfn => pfn.PokemonFormId == formId && pfn.LocalLanguageId == CurrentLanguageId)?.FormName;
			if (!string.IsNullOrEmpty(formName))
			{
				return $"{baseName} {formName}";
			}
		}

		return baseName;
	}


	public string GetMoveNameById(int moveId)
	{
		var matchingMoveName = moveSearchComponent.MoveNames.FirstOrDefault(mn => mn.MoveId == moveId && mn.LocalLanguageId == CurrentLanguageId);
		return matchingMoveName?.Name ?? $"Move {moveId}";
	}




	public int GetSpeciesIdById(int Id)
	{
		return Pokemons.FirstOrDefault(p => p.Id == Id)?.SpeciesId ?? 0;
	}

	public string GetTypeNameById(int typeId, int languageId)
	{
		return TypeNames.FirstOrDefault(tn => tn.TypeId == typeId && tn.LocalLanguageId == languageId)?.Name ?? string.Empty;
	}

	public (string Type1, string Type2) GetPokemonTypesById(int pokemonId)
	{
		var types = PokemonTypes.Where(pt => pt.PokemonId == pokemonId).ToList();
		var typePast = PokemonTypesPast.FirstOrDefault(ptp => ptp.PokemonId == pokemonId && ptp.GenerationId >= versionSelectComponent.CurrentGenerationId);

		if (typePast != null)
		{
			// 만약 조건에 맞는 PokemonTypePast가 있으면 해당 타입을 사용합니다.
			string type1 = typePast.Slot == 1 ? GetTypeNameById(typePast.TypeId, CurrentLanguageId) : string.Empty;
			string type2 = typePast.Slot == 2 ? GetTypeNameById(typePast.TypeId, CurrentLanguageId) : string.Empty;
			return (type1, type2);
		}
		else
		{
			// 그렇지 않으면 기본 PokemonTypes를 사용합니다.
			string type1 = types.FirstOrDefault(t => t.Slot == 1) != null ? GetTypeNameById(types.First(t => t.Slot == 1).TypeId, CurrentLanguageId) : string.Empty;
			string type2 = types.FirstOrDefault(t => t.Slot == 2) != null ? GetTypeNameById(types.First(t => t.Slot == 2).TypeId, CurrentLanguageId) : string.Empty;
			return (type1, type2);
		}
	}


	public string GetAbilityNameById(int abilityId)
	{
		if (abilityId != -1)
		{
			var matchingAbilityName = abilitySearchComponent.AbilityNames.FirstOrDefault(mn => mn.AbilityId == abilityId && mn.LocalLanguageId == CurrentLanguageId);
			return matchingAbilityName?.Name ?? $"Ability {abilityId}";

		}
		else
		{
			return "";
		}



	}

	public (string Ability1, string Ability2, string HiddenAbility) GetAbilityNamesByPokemonId(int pokemonId)
	{
		var abilities = AllPokemonAbilities.Where(pa => pa.PokemonId == pokemonId).ToList();

		string ability1 = GetAbilityNameById(abilities.FirstOrDefault(a => a.Slot == 1)?.AbilityId ?? -1);
		string ability2 = GetAbilityNameById(abilities.FirstOrDefault(a => a.Slot == 2)?.AbilityId ?? -1);
		string hiddenAbility = GetAbilityNameById(abilities.FirstOrDefault(a => a.Slot == 3)?.AbilityId ?? -1);

		return (ability1, ability2, hiddenAbility);
	}

	// 표 정렬
	private enum SortColumn
	{
		SpeciesId,
		Name,
		NumberOfMoves,
		MoveName,
		Level
	}

	private SortColumn CurrentSortColumn { get; set; } = SortColumn.SpeciesId;
	private bool IsAscendingSort { get; set; } = true;

	private void SortData(SortColumn column)
	{
		if (CurrentSortColumn == column)
		{
			IsAscendingSort = !IsAscendingSort;
		}
		else
		{
			CurrentSortColumn = column;
			IsAscendingSort = true;
		}

		switch (column)
		{
			case SortColumn.Name:
				groupedMoves = IsAscendingSort ?
					groupedMoves.OrderBy(group => GetPokemonNameById(group.PokemonId)).ToList() :
					groupedMoves.OrderByDescending(group => GetPokemonNameById(group.PokemonId)).ToList();
				break;
			case SortColumn.SpeciesId:
				groupedMoves = IsAscendingSort ?
					groupedMoves.OrderBy(group => GetSpeciesIdById(group.PokemonId)).ToList() :
					groupedMoves.OrderByDescending(group => GetSpeciesIdById(group.PokemonId)).ToList();
				break;
			case SortColumn.NumberOfMoves:
				groupedMoves = IsAscendingSort ?
					groupedMoves.OrderBy(group => group.Moves.Count).ToList() :
					groupedMoves.OrderByDescending(group => group.UniqueMoveCount).ToList();
				break;
		}

		StateHasChanged();
	}


}



<div class="row">
	<div class="col-md-12 mb-3">
		<!-- mb-3 추가 -->
		<VersionSelect CurrentLanguageId="@CurrentLanguageId" OnVersionSelected="HandleVersionChecked" @ref="versionSelectComponent" />
	</div>

	@if (DataService.IsDataLoaded)
	{
		<div>
			<h3>Any Pokemon</h3>
			<div class="row">
				<div class="col-md-2 mb-3">

					<!-- 특성 선택 (여러 개 선택 가능) -->
					<AbilitySearch CurrentLanguageId="@CurrentLanguageId" @ref="abilitySearchComponent" OnAbilitySelected="(ability) => HandleAbilitySelected(ability, 0)" />
				</div>
				<div class="col-md-2 mb-3">
					<h5>Selected Abilities:</h5>
					<div class="gap"></div>
					<!-- 선택한 능력 표시 -->
					<div class="bordered-box-container">
						@foreach (var abilityId in SelectedAbilities)
						{
							<div @onclick="() => RemoveSelectedAbility(abilityId)" class="selectable-text">
								@GetAbilityNameById(abilityId) (ID: @abilityId)
							</div>
						}
					</div>
				</div>
				<div class="col-md-2 mb-3">
					<!-- 기술 선택 -->
					<MoveSearch CurrentLanguageId="@CurrentLanguageId" @ref="moveSearchComponent" OnMoveSelected="(move) => HandleMoveSelected(move, 0)" />
				</div>
				<div class="col-md-2 mb-3">
					<h5>Selected Moves:</h5>
					<div class="gap"></div>
					<div class="bordered-box-container">
						@foreach (var moveId in SelectedMoves)
						{
							<div @onclick="() => RemoveSelectedMove(moveId)" class="selectable-text">
								@GetMoveNameById(moveId) (ID: @moveId)
							</div>
						}
					</div>
				</div>

			</div>

			@for (var i = 0; i < PokemonSlots.Count; i++)
			{
				var slotNumber = i + 1; // 1-based slot number
				<div class="pokemon-slot">
					<h4>@($"Pokemon {slotNumber}")</h4>
					<div class="row">
						<div class="col-md-2 mb-3">

							<!-- 특성 선택 (여러 개 선택 가능) -->
							<AbilitySearch CurrentLanguageId="@CurrentLanguageId" @ref="abilitySearchComponent" OnAbilitySelected="(ability) => HandleAbilitySelected(ability, slotNumber)" />
						</div>
						<div class="col-md-2 mb-3">
							<h5>Selected Abilities:</h5>
							<div class="gap"></div>
							<!-- 선택한 능력 표시 -->
							<div class="bordered-box-container">
								@foreach (var abilityId in PokemonSlots[i].SelectedAbilities)
								{
									<div @onclick="() => RemoveSelectedAbility(abilityId)" class="selectable-text">
										@GetAbilityNameById(abilityId) (ID: @abilityId)
									</div>
								}
							</div>
						</div>
						<div class="col-md-2 mb-3">
							<!-- 기술 선택 -->
							<MoveSearch CurrentLanguageId="@CurrentLanguageId" @ref="moveSearchComponent" OnMoveSelected="(move) => HandleMoveSelected(move, slotNumber)" />
						</div>
						<div class="col-md-2 mb-3">
							<h5>Selected Moves:</h5>
							<div class="gap"></div>
							<div class="bordered-box-container">
								@foreach (var moveId in PokemonSlots[i].SelectedMoves)
								{
									<div @onclick="() => RemoveSelectedMove(moveId)" class="selectable-text">
										@GetMoveNameById(moveId) (ID: @moveId)
									</div>
								}
							</div>
						</div>

					</div>

					@* 					<!-- 특성 선택 (한 개만 선택 가능) -->
			<AbilitySearch CurrentLanguageId="@CurrentLanguageId" OnAbilitySelected="(ability) => HandleAbilitySelected(ability, slotNumber)" />

			<!-- 선택한 능력 표시 -->
			<div>
			@foreach (var abilityId in PokemonSlots[i].SelectedAbilities)
			{
			<span class="selected-item">@GetAbilityNameById(abilityId)</span>
			}
			</div>

			<!-- 기술 선택 -->
			<MoveSearch CurrentLanguageId="@CurrentLanguageId" OnMoveSelected="(move) => HandleMoveSelected(move, slotNumber)" />

			<!-- 선택한 기술 표시 -->
			<div>
			@foreach (var moveId in PokemonSlots[i].SelectedMoves)
			{
			<span class="selected-item">@GetMoveNameById(moveId)</span>
			}
			</div> *@
				</div>
			}

			<button @onclick="AddPokemonSlot">+</button>
			@if (PokemonSlots.Count > 1)
			{
				<button @onclick="RemovePokemonSlot">-</button>
			}
		</div>
	}
	else
	{
		<p>Loading data...</p>
	}


</div>
<button @onclick="SearchPokemonParty" class="btn-find-pokemon">Search Pokemon Party</button> <!-- class 추가 -->
@if (PokemonSlots.Any())
{
	int totalPokemonCount = AllPokemonMoves
						.Where(pm => pm.VersionGroupId == SelectedVersionId)
						.Select(pm => pm.PokemonId)
						.Distinct()
						.Count();

	<table class="table">
		<thead>
			<tr>
				<th>Slot</th>
				<th>Pokemon No.</th>
				<th>Pokemon Name</th>
				<th>Type 1</th>
				<th>Type 2</th>
				<th>Ability 1</th>
				<th>Ability 2</th>
				<th>Hidden Ability</th>
				<th>Moves</th>
			</tr>
		</thead>

		<tbody>
			@for (int i = 0; i < PokemonSlots.Count; i++)
			{
				var slot = PokemonSlots[i];
				bool isFirstRowForSlot = true;

				if (slot.CurrentList.Count == totalPokemonCount)
				{
					<tr>
						<td>Slot @(i + 1)</td>
						<td></td>
						<td>All Pokemon</td>
						<td colspan="6"></td> <!-- 나머지 열들을 비웁니다 -->
					</tr>
				}
				else
				{
					foreach (var pokemonId in slot.CurrentList)
					{
						var types = GetPokemonTypesById(pokemonId);
						var abilities = GetAbilityNamesByPokemonId(pokemonId);
						<tr>
							@if (isFirstRowForSlot)
							{
								<td rowspan="@slot.CurrentList.Count">Slot @(i + 1)</td>
								isFirstRowForSlot = false;
							}
							<td>@GetSpeciesIdById(pokemonId)</td>
							<td>@GetPokemonNameById(pokemonId)</td>
							<td>@types.Item1</td>
							<td>@types.Item2</td>
							<td>@abilities.Item1</td>
							<td>@abilities.Item2</td>
							<td>@abilities.Item3</td>
							<td>
								@foreach (var moveId in slot.SelectedMoves)
								{
									<span>@GetMoveNameById(moveId)</span>
									<br>
								}
								@foreach (var moveId in slot.AddedMovesFromAny)
								{
									if (moveId != -1)
									{
										<span>@GetMoveNameById(moveId)</span>
										<br>
									}
								}
							</td>
						</tr>
					}
				}
			}
		</tbody>
	</table>
}


else
{
	<div class="no-results">
		<p>검색 결과가 없습니다.</p>
	</div>
}

<style>
	.no-results {
		padding: 20px;
		text-align: center;
		font-size: 18px;
		color: #999;
		background-color: #f8f8f8;
		border: 1px solid #e0e0e0;
		margin-top: 20px;
		border-radius: 5px;
	}
</style>

<style>
	.btn-find-pokemon {
		margin-bottom: 20px; /* 버튼 아래 여백 추가 */
	}
</style>
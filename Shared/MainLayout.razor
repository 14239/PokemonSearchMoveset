@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inherits LayoutComponentBase


<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <div class="language-selector" style="float: left;">
                <label for="languageDropdown">언어 선택: </label>
                <select id="languageDropdown" @bind="SelectedLanguageId" @bind:event="onchange">
                    @foreach (var language in Languages)
                    {
                        <option value="@language.Id">@language.Identifier</option>
                    }
                </select>
            </div>
            <a href="https://docs.microsoft.com/aspnet/" target="_blank" style="float: right;">About</a>
            <div style="clear: both;"></div>
        </div>

        <article class="content px-4">
            @Body
        </article>

    </main>
</div>

@code {
    private int SelectedLanguageId
    {
        get => _selectedLanguageId;
        set
        {
            if (_selectedLanguageId != value)
            {
                _selectedLanguageId = value;
                OnLanguageChanged();
            }
        }
    }
    private int _selectedLanguageId = 3;

    private void OnLanguageChanged()
    {
        var selectedLanguage = Languages.FirstOrDefault(l => l.Id == SelectedLanguageId);
        if (selectedLanguage != null)
        {
            JSRuntime.InvokeVoidAsync("localStorage.setItem", "selectedLanguageId", SelectedLanguageId.ToString());
            JSRuntime.InvokeVoidAsync("localStorage.setItem", "selectedLanguageName", selectedLanguage.Identifier);
        }
    }

    // 나머지 언어 리스트와 로드 메서드는 이전과 동일하게 유지합니다.

    private class Language
    {
        public int Id { get; set; }
        public string Iso639 { get; set; }
        public string Iso3166 { get; set; }
        public string Identifier { get; set; }
        public bool Official { get; set; }
        public int Order { get; set; }
    }

    private List<Language> Languages = new List<Language>
{
        new Language { Id = 1, Iso639 = "ja", Iso3166 = "jp", Identifier = "Japanese (ja-Hrkt)", Official = true, Order = 1 },
        new Language { Id = 2, Iso639 = "ja", Iso3166 = "jp", Identifier = "Roomaji", Official = true, Order = 3 },
        new Language { Id = 3, Iso639 = "ko", Iso3166 = "kr", Identifier = "Korean (ko)", Official = true, Order = 4 },
        new Language { Id = 4, Iso639 = "zh", Iso3166 = "cn", Identifier = "Chinese Traditional (zh-Hant)", Official = true, Order = 5 },
        new Language { Id = 5, Iso639 = "fr", Iso3166 = "fr", Identifier = "French (fr)", Official = true, Order = 8 },
        new Language { Id = 6, Iso639 = "de", Iso3166 = "de", Identifier = "German (de)", Official = true, Order = 9 },
        new Language { Id = 7, Iso639 = "es", Iso3166 = "es", Identifier = "Spanish (es)", Official = true, Order = 10 },
        new Language { Id = 8, Iso639 = "it", Iso3166 = "it", Identifier = "Italian (it)", Official = true, Order = 11 },
        new Language { Id = 9, Iso639 = "en", Iso3166 = "us", Identifier = "English (en)", Official = true, Order = 7 },
        new Language { Id = 10, Iso639 = "cs", Iso3166 = "cz", Identifier = "Czech (cs)", Official = false, Order = 12 },
        new Language { Id = 11, Iso639 = "ja", Iso3166 = "jp", Identifier = "Japanese (ja)", Official = true, Order = 2 },
        new Language { Id = 12, Iso639 = "zh", Iso3166 = "cn", Identifier = "Chinese Simplified (zh-Hans)", Official = true, Order = 6 },
        new Language { Id = 13, Iso639 = "pt-BR", Iso3166 = "br", Identifier = "Portuguese (pt-BR)", Official = false, Order = 13 }
    };



    // 페이지가 로드될 때 로컬 스토리지에서 언어 선택값을 읽어오는 메서드도 필요할 수 있습니다.
    protected override async Task OnInitializedAsync()
    {
        var storedLanguageId = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "selectedLanguageId");
        if (!string.IsNullOrEmpty(storedLanguageId))
        {
            if (int.TryParse(storedLanguageId, out int parsedId))
            {
                SelectedLanguageId = parsedId;
            }
        }
    }
}
